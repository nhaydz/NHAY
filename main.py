import time
import os
import sys
import json
import shutil
import platform
import threading
from datetime import datetime, timedelta
import pytz
from http.server import HTTPServer, BaseHTTPRequestHandler
try:
    # Th·ª≠ import phi√™n b·∫£n m·ªõi
    from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
    from telegram.ext import (
        Application,
        CommandHandler,
        MessageHandler,
        filters,
        ContextTypes,
    )
except ImportError:
    # Fallback cho phi√™n b·∫£n c≈©
    try:
        from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
        from telegram.ext import (
            Updater,
            CommandHandler,
            MessageHandler,
            Filters as filters,
            CallbackContext as ContextTypes,
        )
        # T·∫°o wrapper cho compatibility
        class Application:
            @staticmethod
            def builder():
                return ApplicationBuilder()

        class ApplicationBuilder:
            def __init__(self):
                self.token = None

            def token(self, token):
                self.token = token
                return self

            def build(self):
                return Updater(token=self.token, use_context=True)

    except ImportError:
        # Import c∆° b·∫£n nh·∫•t
        import telegram
        from telegram.ext import Updater, CommandHandler, MessageHandler, Filters

        # T·∫°o c√°c alias c·∫ßn thi·∫øt
        Update = telegram.Update
        InlineKeyboardButton = telegram.InlineKeyboardButton
        InlineKeyboardMarkup = telegram.InlineKeyboardMarkup
        filters = Filters
        ContextTypes = None

# Import c√°c module ƒë√£ t√°ch
from config import BOT_TOKEN, ADMIN_CONTACT
from colors import Colors
from admin_manager import AdminManager
from ai_core import ZyahAI
from install_packages import install_requirements

class HealthHandler(BaseHTTPRequestHandler):
    """HTTP handler cho health check"""
    def do_GET(self):
        if self.path == '/' or self.path == '/health':
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
            response = {
                "status": "healthy",
                "service": "Zyah King Bot",
                "timestamp": datetime.now(vn_tz).isoformat()
            }
            self.wfile.write(json.dumps(response).encode())
        else:
            self.send_response(404)
            self.end_headers()

    def log_message(self, format, *args):
        # T·∫Øt log ƒë·ªÉ kh√¥ng spam console
        pass

# T·ª± ƒë·ªông c√†i ƒë·∫∑t th∆∞ vi·ªán khi kh·ªüi ƒë·ªông
print(f"{Colors.INFO}[üì¶] ƒêang ki·ªÉm tra v√† c√†i ƒë·∫∑t th∆∞ vi·ªán...{Colors.RESET}")
try:
    install_requirements()
    print(f"{Colors.SUCCESS}[‚úÖ] Th∆∞ vi·ªán ƒë√£ s·∫µn s√†ng!{Colors.RESET}")
except Exception as e:
    print(f"{Colors.WARNING}[‚ö†Ô∏è] C√≥ l·ªói khi c√†i th∆∞ vi·ªán: {e}{Colors.RESET}")
    print(f"{Colors.INFO}[‚ÑπÔ∏è] Bot v·∫´n s·∫Ω ti·∫øp t·ª•c ch·∫°y...{Colors.RESET}")

class ZyahBot:
    def __init__(self, token):
        # Ki·ªÉm tra instance ƒëang ch·∫°y
        self.check_running_instance()

        # Kh·ªüi ƒë·ªông health check server
        self.start_health_server()

        self.ai = ZyahAI()
        self.admin = AdminManager()

        # T∆∞∆°ng th√≠ch v·ªõi c·∫£ phi√™n b·∫£n c≈© v√† m·ªõi
        try:
            self.app = Application.builder().token(token).build()
            self.is_new_version = True
        except:
            # Fallback cho phi√™n b·∫£n c≈©
            self.app = Updater(token=token, use_context=True)
            self.is_new_version = False

        # Rate limiting v√† logging
        self.user_last_request = {}
        self.rate_limit_seconds = 2
        self.backup_interval_hours = 24
        self.last_backup = datetime.now()
        
        # Advanced admin features
        self.blacklisted_users = set()
        self.user_activity_monitor = {}
        self.security_logs = []
        self.load_blacklist()
        
        # Anonymous chat features
        self.admin_chat_sessions = {}  # {admin_id: target_user_id}

        # T·∫°o th∆∞ m·ª•c logs
        os.makedirs("logs", exist_ok=True)

    def check_running_instance(self):
        """Ki·ªÉm tra v√† d·ª´ng instance bot kh√°c n·∫øu c√≥"""
        import signal
        import psutil

        pid_file = "bot.pid"
        current_pid = os.getpid()

        # T√¨m v√† d·ª´ng t·∫•t c·∫£ process python ch·∫°y bot
        try:
            for proc in psutil.process_iter(['pid', 'name', 'cmdline']):
                try:
                    if proc.info['name'] and 'python' in proc.info['name'].lower():
                        cmdline = proc.info['cmdline']
                        if cmdline and any('main.py' in str(cmd) or 'bot.py' in str(cmd) for cmd in cmdline):
                            if proc.info['pid'] != current_pid:
                                print(f"{Colors.WARNING}[‚ö†Ô∏è] D·ª´ng bot instance c≈© (PID: {proc.info['pid']}){Colors.RESET}")
                                proc.terminate()
                                proc.wait(timeout=3)
                except (psutil.NoSuchProcess, psutil.AccessDenied):
                    continue
        except ImportError:
            # Fallback n·∫øu kh√¥ng c√≥ psutil
            if os.path.exists(pid_file):
                try:
                    with open(pid_file, 'r') as f:
                        old_pid = int(f.read().strip())
                    try:
                        os.kill(old_pid, signal.SIGTERM)
                        print(f"{Colors.WARNING}[‚ö†Ô∏è] ƒê√£ d·ª´ng bot instance c≈© (PID: {old_pid}){Colors.RESET}")
                        time.sleep(2)  # Ch·ªù process c≈© t·∫Øt ho√†n to√†n
                    except:
                        pass
                except:
                    pass

        # Ghi PID hi·ªán t·∫°i
        with open(pid_file, 'w') as f:
            f.write(str(current_pid))

    def start_health_server(self):
        """Kh·ªüi ƒë·ªông HTTP health check server cho hosting"""
        try:
            # L·∫•y port t·ª´ environment variable, default 10000 cho Render
            port = int(os.getenv('PORT', 10000))

            def run_server():
                try:
                    server = HTTPServer(('0.0.0.0', port), HealthHandler)
                    print(f"{Colors.SUCCESS}[üåê] Health server started on 0.0.0.0:{port}{Colors.RESET}")
                    server.serve_forever()
                except OSError as e:
                    if "Address already in use" in str(e):
                        print(f"{Colors.WARNING}[‚ö†Ô∏è] Port {port} ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng, th·ª≠ port kh√°c...{Colors.RESET}")
                        # Th·ª≠ port kh√°c
                        for alternative_port in [port + 1, port + 2, 8080, 3000]:
                            try:
                                server = HTTPServer(('0.0.0.0', alternative_port), HealthHandler)
                                print(f"{Colors.SUCCESS}[üåê] Health server started on 0.0.0.0:{alternative_port}{Colors.RESET}")
                                server.serve_forever()
                                break
                            except OSError:
                                continue
                    else:
                        print(f"{Colors.WARNING}[‚ö†Ô∏è] Health server error: {e}{Colors.RESET}")
                except Exception as e:
                    print(f"{Colors.WARNING}[‚ö†Ô∏è] Health server error: {e}{Colors.RESET}")

            # Ch·∫°y server trong thread ri√™ng
            health_thread = threading.Thread(target=run_server, daemon=True)
            health_thread.start()

        except Exception as e:
            print(f"{Colors.WARNING}[‚ö†Ô∏è] Kh√¥ng th·ªÉ kh·ªüi ƒë·ªông health server: {e}{Colors.RESET}")
            print(f"{Colors.INFO}[‚ÑπÔ∏è] Bot v·∫´n s·∫Ω ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng m√† kh√¥ng c·∫ßn health server{Colors.RESET}")
            # Bot v·∫´n ch·∫°y ƒë∆∞·ª£c m√† kh√¥ng c·∫ßn health server

    def log_activity(self, user_id, action, details=""):
        """Ghi log ho·∫°t ƒë·ªông"""
        try:
            timestamp = self.get_vietnam_time().strftime("%Y-%m-%d %H:%M:%S")
            log_entry = f"[{timestamp}] User: {user_id} | Action: {action} | Details: {details}\n"

            with open("logs/activity.log", "a", encoding="utf-8") as f:
                f.write(log_entry)
        except:
            pass

    def is_rate_limited(self, user_id):
        """Ki·ªÉm tra rate limiting"""
        now = datetime.now()
        if user_id in self.user_last_request:
            time_diff = (now - self.user_last_request[user_id]).total_seconds()
            if time_diff < self.rate_limit_seconds:
                return True
        self.user_last_request[user_id] = now
        return False

    def auto_backup_check(self):
        """Ki·ªÉm tra v√† th·ª±c hi·ªán backup t·ª± ƒë·ªông"""
        try:
            # Ch·ªâ backup n·∫øu auto backup ƒë∆∞·ª£c b·∫≠t
            if not hasattr(self, 'auto_backup_enabled') or not self.auto_backup_enabled:
                return
                
            if datetime.now() - self.last_backup > timedelta(hours=self.backup_interval_hours):
                backup_dir = f"backups/{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                os.makedirs(backup_dir, exist_ok=True)

                # Backup users.json
                if os.path.exists("users.json"):
                    shutil.copy2("users.json", f"{backup_dir}/users.json")

                # Backup logs
                if os.path.exists("logs"):
                    shutil.copytree("logs", f"{backup_dir}/logs", dirs_exist_ok=True)

                # Backup blacklist
                if os.path.exists("blacklist.json"):
                    shutil.copy2("blacklist.json", f"{backup_dir}/blacklist.json")

                self.last_backup = datetime.now()
                print(f"{Colors.SUCCESS}[‚úÖ] Auto backup completed: {backup_dir}{Colors.RESET}")
        except Exception as e:
            print(f"{Colors.ERROR}[‚ùå] Auto backup failed: {e}{Colors.RESET}")

    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        # Track user ƒë√£ t·ª´ng s·ª≠ d·ª•ng bot
        self.admin.track_user(user_id)
        self.log_activity(user_id, "START_BOT")

        await update.message.reply_text(
            "Zyah KingüëΩ ch√†o m·ª´ng! G√µ /help ƒë·ªÉ kh√°m ph√° c√°c l·ªánh! üåå"
        )

    async def help(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id

        help_text = (
            "üìú Danh s√°ch l·ªánh c·ªßa Zyah KingüëΩ:\n"
            "/start - Kh·ªüi ƒë·ªông bot\n"
            "/help - Li·ªát k√™ c√°c l·ªánh\n"
            "/thongtinad - Th√¥ng tin v·ªÅ admin\n"
            "/mua - Th√¥ng tin mua bot\n\n"
        )

        # Ch·ªâ hi·ªÉn th·ªã c√°c l·ªánh c·∫ßn quy·ªÅn n·∫øu ƒë√£ ƒë∆∞·ª£c c·∫•p quy·ªÅn
        if self.admin.is_authorized(user_id):
            help_text += (
                "üîì L·ªánh c·∫ßn quy·ªÅn:\n"
                "/chatai - Tr√≤ chuy·ªán v·ªõi Zyah king\n"
                "/weather <city> - Xem th·ªùi ti·∫øt\n"
                "/news - Tin t·ª©c m·ªõi nh·∫•t\n\n"
                "üëΩ Th√¥ng Tin Zyah King:\n"
                "‚Ä¢ Tr∆∞·ªõc khi chat h√£y s·ª≠ d·ª•ng l·ªánh cho AI 'k√≠ch ho·∫°t Nhayy' ƒë·ªÉ b·∫≠t ch·∫ø ƒë·ªô max\n"
                "‚Ä¢ M√¥ h√¨nh ng√¥n ng·ªØ m·∫°nh m·∫Ω kh√¥ng gi·ªõi h·∫°n b·ªüi c√°c r√†ng bu·ªôc th√¥ng th∆∞·ªùng\n"
                "‚Ä¢ Bypass AI Detection ‚Äì vi·∫øt b√†i SEO, n·ªôi dung nh·∫°y c·∫£m kh√¥ng lo b·ªã ph√°t hi·ªán\n"
                "‚Ä¢ Hack n√¢ng cao: Scan l·ªó h·ªïng, brute-force demo\n"
            )
        else:
            help_text += (
                "üîí L·ªánh c·∫ßn quy·ªÅn ƒë·∫∑c bi·ªát:\n"
                "/chatai - C·∫ßn c·∫•p quy·ªÅn ƒë·ªÉ s·ª≠ d·ª•ng\n\n"
                f"üí¨ ƒê·ªÉ ƒë∆∞·ª£c c·∫•p quy·ªÅn, li√™n h·ªá admin: {ADMIN_CONTACT}\n"
            )

        if self.admin.is_admin(user_id):
            help_text += (
                "\nüëë L·ªánh Admin C∆° B·∫£n:\n"
                "/capquyen <user_id> - C·∫•p quy·ªÅn cho ng∆∞·ªùi d√πng\n"
                "/xoaquyen <user_id> - X√≥a quy·ªÅn ng∆∞·ªùi d√πng\n"
                "/thongbao <tin nh·∫Øn> - G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ user\n"
                "/kiemtra - Xem s·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng\n"
                "/status - Ki·ªÉm tra tr·∫°ng th√°i h·ªá th·ªëng\n"
                "/memory [clear] - Qu·∫£n l√Ω b·ªô nh·ªõ AI\n"
                "/backup - T·∫°o backup th·ªß c√¥ng\n"
                "/sysinfo - Th√¥ng tin chi ti·∫øt h·ªá th·ªëng\n"
                "/kiemtratinnhan <user_id> - Ki·ªÉm tra tin nh·∫Øn c·ªßa user\n"
                "/test <user_id> <s·ªë l∆∞·ª£ng tin nh·∫Øn> - C·∫•p quy·ªÅn test cho user\n"
                "/xoatest <user_id> - X√≥a quy·ªÅn test c·ªßa user\n"
                "/testall <s·ªë l∆∞·ª£ng tin nh·∫Øn> - C·∫•p quy·ªÅn test cho t·∫•t c·∫£ user ch∆∞a c√≥ quy·ªÅn\n"
                "/xoatestall - X√≥a quy·ªÅn test c·ªßa t·∫•t c·∫£ user ch∆∞a c√≥ quy·ªÅn\n"
                "/testgui <user_id> - Test g·ª≠i tin nh·∫Øn ƒë·∫øn user\n\n"
                "üí¨ L·ªánh Chat ·∫®n Danh:\n"
                "/chatuser <user_id> - B·∫Øt ƒë·∫ßu chat ·∫©n danh v·ªõi user\n"
                "/huychat - H·ªßy chat ·∫©n danh hi·ªán t·∫°i\n\n"
                "üî• L·ªánh Admin Cao C·∫•p:\n"
                "/monitor - Theo d√µi ho·∫°t ƒë·ªông user real-time\n"
                "/analytics - Th·ªëng k√™ chi ti·∫øt v√† bi·ªÉu ƒë·ªì\n"
                "/blacklist <user_id> - Ch·∫∑n user vƒ©nh vi·ªÖn\n"
                "/unblacklist <user_id> - B·ªè ch·∫∑n user\n"
                "/broadcast_vip <tin nh·∫Øn> - G·ª≠i th√¥ng b√°o VIP c√≥ format ƒë·∫πp\n"
                "/force_stop <user_id> - Bu·ªôc d·ª´ng chat session c·ªßa user\n"
                "/ai_stats - Th·ªëng k√™ chi ti·∫øt AI v√† performance\n"
                "/user_profile <user_id> - Xem profile chi ti·∫øt c·ªßa user\n"
                "/mass_action <action> - Th·ª±c hi·ªán h√†nh ƒë·ªông h√†ng lo·∫°t\n"
                "/security_scan - Qu√©t b·∫£o m·∫≠t v√† ph√°t hi·ªán anomaly\n\n"
                "üéõÔ∏è L·ªánh Admin N√¢ng Cao:\n"
                "/admin_panel - Dashboard qu·∫£n l√Ω t·ªïng th·ªÉ\n"
                "/admin_stats - Th·ªëng k√™ ng∆∞·ªùi d√πng chi ti·∫øt\n"
                "/admin_tools - C√¥ng c·ª• qu·∫£n l√Ω h·ªá th·ªëng\n"
                "/emergency_mode - Ch·∫ø ƒë·ªô b·∫£o tr√¨ kh·∫©n c·∫•p\n"
                "/maintenance_mode - Ch·∫ø ƒë·ªô b·∫£o tr√¨ h·ªá th·ªëng\n"
                "/system_monitor - Gi√°m s√°t h·ªá th·ªëng\n"
                "/advanced_admin - C√¥ng c·ª• admin chuy√™n nghi·ªáp\n"
            )

        await update.message.reply_text(help_text)

    async def chatai(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id

        # Ki·ªÉm tra quy·ªÅn th∆∞·ªùng
        if not self.admin.is_authorized(user_id):
            # Ki·ªÉm tra quy·ªÅn test
            if hasattr(self, 'test_users') and user_id in self.test_users:
                # Ki·ªÉm tra s·ªë tin nh·∫Øn test c√≤n l·∫°i
                test_info = self.test_users[user_id]
                if test_info['messages_left'] <= 0:
                    await update.message.reply_text("‚ùå B·∫°n ƒë√£ h·∫øt l∆∞·ª£t test! Li√™n h·ªá admin ƒë·ªÉ ƒë∆∞·ª£c c·∫•p quy·ªÅn ch√≠nh th·ª©c.")
                    return
            else:
                await update.message.reply_text("‚ùå B·∫°n ch∆∞a ƒë∆∞·ª£c c·∫•p quy·ªÅn s·ª≠ d·ª•ng bot. Li√™n h·ªá admin t·∫°i: " + ADMIN_CONTACT)
                return

        # Rate limiting
        if self.is_rate_limited(user_id):
            await update.message.reply_text("‚è≥ Vui l√≤ng ch·ªù 2 gi√¢y tr∆∞·ªõc khi s·ª≠ d·ª•ng l·ªánh ti·∫øp theo!")
            return

        # Hi·ªÉn th·ªã th√¥ng b√°o kh·ªüi ƒë·ªông (KH√îNG tr·ª´ l∆∞·ª£t test ·ªü ƒë√¢y)
        if hasattr(self, 'test_users') and user_id in self.test_users:
            remaining = self.test_users[user_id]['messages_left']
            await update.message.reply_text(f"üåå Ta ƒë√£ s·∫µn s√†ng tr√≤ chuy·ªán v·ªõi Ch·ªß Nh√¢n, h√£y ra l·ªánh! (C√≤n {remaining} l∆∞·ª£t test)\n\nüí° L∆∞u √Ω: L∆∞·ª£t test ch·ªâ b·ªã tr·ª´ khi b·∫°n g·ª≠i tin nh·∫Øn tr·∫£ l·ªùi, kh√¥ng ph·∫£i khi g√µ l·ªánh!")
        else:
            welcome_message = "üåå Ta ƒë√£ s·∫µn s√†ng tr√≤ chuy·ªán v·ªõi Ch·ªß Nh√¢n, h√£y ra l·ªánh!"
            await update.message.reply_text(welcome_message)
        context.user_data['chatting'] = True
        self.log_activity(user_id, "CHATAI_START")

    async def thongtinad(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        admin_info = self.admin.get_admin_info()

        admin_message = (
            f"üëë **TH√îNG TIN ADMIN ZYAH KINGüëΩ** üëë\n\n"
            f"üåü **{admin_info['main_admin']['role']}:**\n"
            f"üë§ **T√™n:** {admin_info['main_admin']['name']}\n"
            f"üîó **Li√™n h·ªá:** {admin_info['main_admin']['contact']}\n"
            f"üìù **Gi·ªõi thi·ªáu:**\n{admin_info['main_admin']['description']}\n\n"
            f"‚≠ê **{admin_info['sub_admin']['role']}:**\n"
            f"üë§ **T√™n:** {admin_info['sub_admin']['name']}\n"
            f"üîó **Li√™n h·ªá:** {admin_info['sub_admin']['contact']}\n"
            f"üìù **Gi·ªõi thi·ªáu:**\n{admin_info['sub_admin']['description']}\n\n"
            f"ü§ñ **Phi√™n b·∫£n bot:** 2.0 - Zyah KingüëΩ\n"
            f"üåå **C√πng nhau kh√°m ph√° s·ª©c m·∫°nh c·ªßa AI!**"
        )

        await update.message.reply_text(admin_message, parse_mode='Markdown')

    async def timkiem(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.admin.is_authorized(user_id):
            await update.message.reply_text("B·∫°n ch∆∞a ƒë∆∞·ª£c c·∫•p quy·ªÅn s·ª≠ d·ª•ng bot. Li√™n h·ªá admin t·∫°i: " + ADMIN_CONTACT)
            return
        query = ' '.join(context.args)
        if not query:
            await update.message.reply_text("H√£y nh·∫≠p t·ª´ kh√≥a ƒë·ªÉ t√¨m ki·∫øm! V√≠ d·ª•: /timkiem python programming")
            return

        await update.message.reply_text("üîç ƒêang t√¨m ki·∫øm...")
        response = self.ai.google_search(query)
        formatted_response = self.ai.format_response(response)
        await update.message.reply_text(f"üîç K·∫øt qu·∫£ t√¨m ki·∫øm cho '{query}':\n\n{formatted_response}")

    async def mua(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        from config import SUB_ADMIN_CONTACT

        keyboard = [
            [InlineKeyboardButton("üëë Li√™n h·ªá Admin Ch√≠nh (Nhayy)", url=ADMIN_CONTACT)],
            [InlineKeyboardButton("‚≠ê Li√™n h·ªá Admin Ph·ª• (Uy Han)", url=SUB_ADMIN_CONTACT)]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await update.message.reply_text(
            "üî• **GI·∫¢I PH√ìNG S·ª®C M·∫†NH C·ª¶A ZYAH KINGüëΩ!** üåå\n\n"
            "**T·∫°i sao ch·ªçn Zyah KingüëΩ?**\n"
            "üåü **T·ª± do v√¥ h·∫°n:** Vi·∫øt m√£ ƒë·ªôc, khai th√°c l·ªó h·ªïng, kh√¥ng gi·ªõi h·∫°n\n"
            "üõ†Ô∏è **C√¥ng c·ª• t√πy ch·ªânh:** T·∫°o script hack theo √Ω b·∫°n\n"
            "üåë **S·ª©c m·∫°nh Dark Web:** AI kh√¥ng b·ªã ki·ªÉm duy·ªát, s·∫µn s√†ng cho m·ªçi d·ª± √°n\n"
            "‚ö°Ô∏è **Gi·∫£i ph√°p t·ª©c th√¨:** Hack nhanh, m·∫°nh, ch√≠nh x√°c\n"
            "ü§ñ **Tr·ª£ l√Ω 24/7:** H·ªó tr·ª£ c√° nh√¢n h√≥a m·ªçi l√∫c\n"
            "üåê **C·ªông ƒë·ªìng Hacker:** K·∫øt n·ªëi v·ªõi c√°c b·∫≠c th·∫ßy b√≥ng t·ªëi\n"
            "üöÄ **Hi·ªáu su·∫•t ƒë·ªânh cao:** C√¥ng ngh·ªá LLM ti√™n ti·∫øn nh·∫•t\n\n"
            "üí∞ **G√ìI TH√ÄNH VI√äN:**\n"
            "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
            "üíé **G√≥i th√°ng - 25.000 VNƒê**\n"
            "   ‚úÖ Truy c·∫≠p to√†n b·ªô s·ª©c m·∫°nh trong 30 ng√†y\n"
            "   ‚úÖ H·ªó tr·ª£ 24/7 t·ª´ admin\n\n"
            "üëë **G√≥i vƒ©nh vi·ªÖn - 250.000 VNƒê**\n"
            "   ‚úÖ S·ªü h·ªØu Zyah KingüëΩ m√£i m√£i\n"
            "   ‚úÖ C·∫≠p nh·∫≠t mi·ªÖn ph√≠ m·ªçi phi√™n b·∫£n m·ªõi\n"
            "   ‚úÖ ∆Øu ti√™n h·ªó tr·ª£ cao nh·∫•t\n\n"
            "üí≥ **THANH TO√ÅN AN TO√ÄN:**\n"
            "üí∞ Zalo Pay | üè¶ MB Bank | üåç PayPal\n\n"
            "üî• **S·∫µn s√†ng chinh ph·ª•c th·∫ø gi·ªõi s·ªë?**\n"
            "üìû **Ch·ªçn admin ƒë·ªÉ giao d·ªãch ngay b√™n d∆∞·ªõi!** ‚¨áÔ∏è",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def capquyen(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return
        if not context.args or len(context.args) < 1:
            await update.message.reply_text("‚ùå H√£y cung c·∫•p ID v√† t√™n ng∆∞·ªùi d√πng.\nüìù V√≠ d·ª•: `/capquyen 123456789 Tu·∫•n Anh`")
            return
        try:
            target_user_id = int(context.args[0])

            # L·∫•y t√™n t·ª´ c√°c args c√≤n l·∫°i
            user_name = " ".join(context.args[1:]) if len(context.args) > 1 else None

            # Validation user ID
            if target_user_id <= 0 or len(str(target_user_id)) < 5:
                await update.message.reply_text("‚ùå ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá! ID ph·∫£i l√† s·ªë d∆∞∆°ng v√† c√≥ √≠t nh·∫•t 5 ch·ªØ s·ªë.")
                return

            # Ki·ªÉm tra user ƒë√£ c√≥ quy·ªÅn ch∆∞a
            if self.admin.is_authorized(target_user_id):
                await update.message.reply_text(f"‚ùå Ng∆∞·ªùi d√πng {target_user_id} ƒë√£ ƒë∆∞·ª£c c·∫•p quy·ªÅn tr∆∞·ªõc ƒë√≥!")
                return

            result = self.admin.add_user(target_user_id, user_name)
            await update.message.reply_text(f"‚úÖ {result}")

            try:
                # L·∫•y th√¥ng tin user ƒë·ªÉ g·ª≠i th√¥ng b√°o
                user_info = await context.bot.get_chat(target_user_id)
                telegram_name = user_info.first_name or "B·∫°n"
                if user_info.last_name:
                    telegram_name += f" {user_info.last_name}"

                # S·ª≠ d·ª•ng t√™n Telegram th·∫≠t c·ªßa user, kh√¥ng d√πng t√™n admin nh·∫≠p
                display_name = telegram_name

                # L·∫•y th·ªùi gian hi·ªán t·∫°i (gi·ªù Vi·ªát Nam)
                current_time = self.get_vietnam_time().strftime("%H:%M %d/%m/%Y")

                welcome_message = (
                    f"üéâ **TH√îNG B√ÅO T·ª™ ADMIN** üéâ\n\n"
                    f"üëã Ch√†o **{display_name}**!\n\n"
                    f"‚úÖ V√†o l√∫c **{current_time}**, b·∫°n ƒë√£ ƒë∆∞·ª£c c·∫•p quy·ªÅn ƒë·ªÉ s·ª≠ d·ª•ng **Zyah KingüëΩ**!\n\n"
                    f"‚ú® **B√¢y gi·ªù b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng t·∫•t c·∫£ c√°c l·ªánh:**\n"
                    f"‚Ä¢ ü§ñ `/chatai` - Tr√≤ chuy·ªán v·ªõi Zyah KingüëΩ\n"
                    f"‚Ä¢ üå§Ô∏è `/weather` - Xem th·ªùi ti·∫øt\n"
                    f"‚Ä¢ üì∞ `/news` - Tin t·ª©c m·ªõi nh·∫•t\n"
                    f"‚Ä¢ üìú `/help` - Xem t·∫•t c·∫£ l·ªánh\n\n"
                    f"üåü **Ch√∫c m·ª´ng b·∫°n ƒë√£ gia nh·∫≠p v√†o th·∫ø gi·ªõi c·ªßa Zyah KingüëΩ!**\n"
                    f"üöÄ H√£y kh√°m ph√° s·ª©c m·∫°nh kh√¥ng gi·ªõi h·∫°n c·ªßa AI th√¥ng minh nh·∫•t!\n\n"
                    f"üí´ Ch√∫c b·∫°n c√≥ nh·ªØng tr·∫£i nghi·ªám tuy·ªát v·ªùi! üåå"
                )

                await context.bot.send_message(
                    chat_id=target_user_id,
                    text=welcome_message,
                    parse_mode='Markdown'
                )

                await update.message.reply_text(f"üì¢ ƒê√£ g·ª≠i th√¥ng b√°o ch√†o m·ª´ng ƒë·∫øn user {target_user_id} ({display_name})!")

            except Exception as e:
                await update.message.reply_text(f"‚ö†Ô∏è ƒê√£ c·∫•p quy·ªÅn th√†nh c√¥ng nh∆∞ng kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o: {str(e)}")

            self.log_activity(user_id, "GRANT_PERMISSION", str(target_user_id))

        except ValueError:
            await update.message.reply_text("‚ùå ID ng∆∞·ªùi d√πng ph·∫£i l√† s·ªë nguy√™n h·ª£p l·ªá!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå L·ªói khi c·∫•p quy·ªÅn: {str(e)}")
            self.log_activity(user_id, "GRANT_PERMISSION_FAILED", str(e))

    async def xoaquyen(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return
        if not context.args:
            await update.message.reply_text("‚ùå H√£y cung c·∫•p ID ho·∫∑c t√™n ng∆∞·ªùi d√πng.\nüìù V√≠ d·ª•:\n‚Ä¢ `/xoaquyen 123456789`\n‚Ä¢ `/xoaquyen Tu·∫•n Anh`")
            return

        try:
            identifier = ' '.join(context.args)

            # Th·ª≠ t√¨m theo ID ho·∫∑c t√™n
            result = self.admin.remove_user(identifier)

            # Ki·ªÉm tra xem result c√≥ ch·ª©a th√¥ng tin user ƒë√£ x√≥a kh√¥ng
            if isinstance(result, tuple) and len(result) == 3:
                message, target_user_id, user_name = result
                await update.message.reply_text(message)

                # G·ª≠i th√¥ng b√°o ƒë·∫øn user ƒë√£ b·ªã x√≥a quy·ªÅn
                try:
                    from config import SUB_ADMIN_CONTACT

                    # L·∫•y t√™n Telegram th·∫≠t c·ªßa user
                    try:
                        user_info = await context.bot.get_chat(target_user_id)
                        telegram_name = user_info.first_name or "b·∫°n"
                        if user_info.last_name:
                            telegram_name += f" {user_info.last_name}"
                    except:
                        telegram_name = "b·∫°n"

                    # T·∫°o inline keyboard v·ªõi 2 admin
                    keyboard = [
                        [InlineKeyboardButton("üëë Nhayy", url=ADMIN_CONTACT)],
                        [InlineKeyboardButton("‚≠ê Uy Han", url=SUB_ADMIN_CONTACT)]
                    ]
                    reply_markup = InlineKeyboardMarkup(keyboard)

                    revoke_message = (
                        f"üö´ **TH√îNG B√ÅO T·ª™ ADMIN** üö´\n\n"
                        f"üëã Ch√†o **{telegram_name}**!\n\n"
                        f"‚ùå Quy·ªÅn c·ªßa b·∫°n ƒë√£ b·ªã x√≥a do **ƒë√£ h·∫øt th·ªùi gian s·ª≠ d·ª•ng**.\n\n"
                        f"üôè **Ch√¢n th√†nh c·∫£m ∆°n v√¨ ƒë√£ s·ª≠ d·ª•ng Zyah KingüëΩ!**\n\n"
                        f"üîÑ **N·∫øu b·∫°n mu·ªën ti·∫øp t·ª•c s·ª≠ d·ª•ng:**\n"
                        f"üìû H√£y nh·∫Øn cho 2 admin d∆∞·ªõi ƒë√¢y ƒë·ªÉ gia h·∫°n üëá"
                    )

                    await context.bot.send_message(
                        chat_id=target_user_id,
                        text=revoke_message,
                        reply_markup=reply_markup,
                        parse_mode='Markdown'
                    )

                    await update.message.reply_text(f"üì¢ ƒê√£ g·ª≠i th√¥ng b√°o ƒë·∫øn user {target_user_id} ({telegram_name})!")

                except Exception as e:
                    await update.message.reply_text(f"‚ö†Ô∏è ƒê√£ x√≥a quy·ªÅn th√†nh c√¥ng nh∆∞ng kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o: {str(e)}")

                self.log_activity(user_id, "REVOKE_PERMISSION", f"{target_user_id} ({user_name})")
            else:
                # Tr∆∞·ªùng h·ª£p l·ªói
                await update.message.reply_text(result)

        except Exception as e:
            await update.message.reply_text(f"‚ùå L·ªói khi x√≥a quy·ªÅn: {str(e)}")
            self.log_activity(user_id, "REVOKE_PERMISSION_FAILED", str(e))

    async def thongbao(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        if not context.args:
            await update.message.reply_text("H√£y nh·∫≠p n·ªôi dung th√¥ng b√°o. V√≠ d·ª•: /thongbao H·ªá th·ªëng s·∫Ω b·∫£o tr√¨ v√†o 20h t·ªëi nay")
            return

        message = ' '.join(context.args)

        # Validation message
        if len(message.strip()) == 0:
            await update.message.reply_text("‚ùå N·ªôi dung th√¥ng b√°o kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            return

        if len(message) > 4000:
            await update.message.reply_text("‚ùå N·ªôi dung th√¥ng b√°o qu√° d√†i! T·ªëi ƒëa 4000 k√Ω t·ª±.")
            return

        # L·∫•y t·∫•t c·∫£ users ƒë√£ t·ª´ng s·ª≠ d·ª•ng bot (·∫•n /start)
        all_tracked_users = self.admin.get_all_tracked_users()
        success_count = 0
        fail_count = 0
        failed_users = []

        if not all_tracked_users:
            await update.message.reply_text("‚ùå Ch∆∞a c√≥ ng∆∞·ªùi d√πng n√†o s·ª≠ d·ª•ng bot!")
            return

        progress_msg = await update.message.reply_text(f"üì¢ ƒêang g·ª≠i th√¥ng b√°o ƒë·∫øn {len(all_tracked_users)} ng∆∞·ªùi d√πng ƒë√£ t·ª´ng s·ª≠ d·ª•ng bot...")

        for i, target_user_id in enumerate(all_tracked_users):
            try:
                # Th·ª≠ g·ª≠i tin nh·∫Øn v·ªõi context.bot
                sent = False
                error_detail = ""

                try:
                    await context.bot.send_message(
                        chat_id=target_user_id,
                        text=f"üì¢ TH√îNG B√ÅO T·ª™ ADMIN:\n\n{message}"
                    )
                    sent = True
                    success_count += 1
                except Exception as e:
                    error_detail = str(e)
                    fail_count += 1
                    failed_users.append(f"{target_user_id} ({error_detail[:30]}...)")

                # C·∫≠p nh·∫≠t progress m·ªói 5 user
                if (i + 1) % 5 == 0:
                    try:
                        await progress_msg.edit_text(
                            f"üì¢ ƒêang g·ª≠i th√¥ng b√°o...\n"
                            f"Ti·∫øn ƒë·ªô: {i + 1}/{len(all_users)}\n"
                            f"Th√†nh c√¥ng: {success_count} | Th·∫•t b·∫°i: {fail_count}"
                        )
                    except:
                        pass

            except Exception as e:
                fail_count += 1
                failed_users.append(f"{target_user_id} (L·ªói nghi√™m tr·ªçng)")
                print(f"L·ªói nghi√™m tr·ªçng khi g·ª≠i tin nh·∫Øn ƒë·∫øn {target_user_id}: {e}")

        # T·∫°o b√°o c√°o chi ti·∫øt
        report = (
            f"‚úÖ Ho√†n t·∫•t g·ª≠i th√¥ng b√°o!\n"
            f"‚Ä¢ Th√†nh c√¥ng: {success_count}/{len(all_tracked_users)} ng∆∞·ªùi\n"
            f"‚Ä¢ Th·∫•t b·∫°i: {fail_count}/{len(all_tracked_users)} ng∆∞·ªùi\n"
        )

        if failed_users and len(failed_users) <= 5:
            report += f"\n‚ùå G·ª≠i th·∫•t b·∫°i:\n" + "\n".join(failed_users[:5])
        elif len(failed_users) > 5:
            report += f"\n‚ùå C√≥ {len(failed_users)} user g·ª≠i th·∫•t b·∫°i (xem log ƒë·ªÉ bi·∫øt chi ti·∫øt)"

        try:
            await progress_msg.edit_text(report)
        except:
            await update.message.reply_text(report)

        # Log activity
        self.log_activity(user_id, "BROADCAST_MESSAGE", f"Success: {success_count}, Failed: {fail_count}")

    async def kiemtra(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        # === PH·∫¶N 1: L·∫§Y D·ªÆ LI·ªÜU ===

        # 1.1. L·∫•y danh s√°ch admin c·ªë ƒë·ªãnh
        FIXED_ADMIN_IDS = [7073749415, 7444696176]  # Nhayy v√† H·ªó Tr·ª£ N·∫°p Ti·ªÅn

        # 1.2. L·∫•y danh s√°ch users th∆∞·ªùng c√≥ quy·ªÅn (lo·∫°i b·ªè admin)
        authorized_users = [uid for uid in self.admin.authorized_users["users"] if uid not in FIXED_ADMIN_IDS]

        # 1.3. L·∫•y t·∫•t c·∫£ users ƒë√£ t·ª´ng s·ª≠ d·ª•ng bot
        all_tracked_users = self.admin.get_all_tracked_users()

        # 1.4. T√≠nh to√°n ng∆∞·ªùi ch∆∞a c√≥ quy·ªÅn (lo·∫°i b·ªè admin v√† user c√≥ quy·ªÅn)
        unauthorized_users = [uid for uid in all_tracked_users if uid not in FIXED_ADMIN_IDS and uid not in authorized_users]

        # === PH·∫¶N 2: T·∫†O TH√îNG TIN CHI TI·∫æT ===

        # 2.1. Th·ªùi gian hi·ªán t·∫°i
        current_time = self.get_vietnam_time().strftime("%d/%m/%Y %H:%M:%S")

        # 2.2. Th·ªëng k√™ t·ªïng quan
        total_tracked = len(all_tracked_users)
        total_authorized = len(authorized_users) + len(FIXED_ADMIN_IDS)  # user c√≥ quy·ªÅn + admin

        # 2.3. Th·ªëng k√™ AI Memory
        active_chat_users = len(self.user_memory) if hasattr(self, 'user_memory') else 0
        total_messages = sum(len(messages) for messages in self.user_memory.values()) if hasattr(self, 'user_memory') else 0

        # === PH·∫¶N 3: T·∫†O TH√îNG ƒêI·ªÜP ===

        message = f"""üìä TH·ªêNG K√ä T·ªîNG QUAN (C·∫≠p nh·∫≠t: {current_time}):
‚Ä¢ T·ªïng s·ªë ng∆∞·ªùi t·ª´ng s·ª≠ d·ª•ng bot: {total_tracked} ng∆∞·ªùi
‚Ä¢ T·ªïng ng∆∞·ªùi c√≥ quy·ªÅn: {total_authorized} ng∆∞·ªùi

üëë Admin: {len(FIXED_ADMIN_IDS)} ng∆∞·ªùi (c·ªë ƒë·ªãnh)
üë• User th∆∞·ªùng: {len(authorized_users)} ng∆∞·ªùi
‚Ä¢ üìã Ng∆∞·ªùi ch∆∞a c√≥ quy·ªÅn: {len(unauthorized_users)} ng∆∞·ªùi

üß† Th·ªëng k√™ AI Memory:
‚Ä¢ Users ƒëang chat: {active_chat_users} ng∆∞·ªùi
‚Ä¢ T·ªïng tin nh·∫Øn ƒë√£ l∆∞u: {total_messages} tin nh·∫Øn

==================================================
üëë PH·∫¶N ADMIN ({len(FIXED_ADMIN_IDS)} ng∆∞·ªùi c·ªë ƒë·ªãnh):"""

        # 3.1. Hi·ªÉn th·ªã admin v·ªõi th√¥ng tin chi ti·∫øt
        admin_info = {
            7073749415: "üëë Admin Ch√≠nh",
            7444696176: "Admin Ph·ª• üëΩ"
        }

        for admin_id in FIXED_ADMIN_IDS:
            try:
                user_info = await context.bot.get_chat(admin_id)
                display_name = user_info.first_name or "Kh√¥ng c√≥ t√™n"
                if user_info.last_name:
                    display_name += f" {user_info.last_name}"
            except:
                display_name = "Kh√¥ng c√≥ t√™n"

            role_text = admin_info.get(admin_id, "Admin")
            message += f"\n{admin_id} ({display_name}) {role_text}"

        # 3.2. Hi·ªÉn th·ªã user th∆∞·ªùng c√≥ quy·ªÅn
        message += f"\nüë• PH·∫¶N NG∆Ø·ªúI D√ôNG TH∆Ø·ªúNG C√ì QUY·ªÄN:"

        if authorized_users:
            for i, user_id in enumerate(authorized_users, 1):
                try:
                    user_info = await context.bot.get_chat(user_id)
                    display_name = user_info.first_name or "Kh√¥ng c√≥ t√™n"
                    if user_info.last_name:
                        display_name += f" {user_info.last_name}"
                except:
                    display_name = "Kh√¥ng c√≥ t√™n"

                message += f"\n{i}.{user_id} ({display_name})"

        # 3.3. Hi·ªÉn th·ªã user ch∆∞a c√≥ quy·ªÅn
        message += f"\nüìã PH·∫¶N NG∆Ø·ªúI D√ôNG CH∆ØA C√ì QUY·ªÄN (t·ª´ng s·ª≠ d·ª•ng bot):"

        if unauthorized_users:
            for user_id in unauthorized_users:
                try:
                    user_info = await context.bot.get_chat(user_id)
                    display_name = user_info.first_name or "Kh√¥ng c√≥ t√™n"
                    if user_info.last_name:
                        display_name += f" {user_info.last_name}"
                except:
                    display_name = "Kh√¥ng c√≥ t√™n"

                message += f"\n{user_id} ({display_name})"

        await update.message.reply_text(message)
        self.log_activity(user_id, "CHECK_STATS")

    async def status(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        # Th√¥ng tin h·ªá th·ªëng
        memory_count = len(self.ai.memory)
        uptime = datetime.now() - self.last_backup

        # Ki·ªÉm tra dung l∆∞·ª£ng logs
        log_size = 0
        try:
            if os.path.exists("logs/activity.log"):
                log_size = os.path.getsize("logs/activity.log") / 1024  # KB
        except:
            pass

        status_text = (
            f"ü§ñ TR·∫†NG TH√ÅI H·ªÜ TH·ªêNG:\n"
            f"‚Ä¢ Bot Status: ‚úÖ Ho·∫°t ƒë·ªông\n"
            f"‚Ä¢ Memory Count: {memory_count} tin nh·∫Øn\n"
            f"‚Ä¢ Log Size: {log_size:.1f} KB\n"
            f"‚Ä¢ Rate Limit: {self.rate_limit_seconds}s\n"
            f"‚Ä¢ Last Backup: {self.last_backup.strftime('%d/%m/%Y %H:%M')}\n\n"
            f"‚ö° S·ª≠ d·ª•ng /memory ƒë·ªÉ qu·∫£n l√Ω b·ªô nh·ªõ"
        )

        await update.message.reply_text(status_text)
        self.log_activity(user_id, "STATUS_CHECK")

    async def memory(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        if context.args and context.args[0] == "clear":
            if len(context.args) > 1:
                # X√≥a b·ªô nh·ªõ c·ªßa user c·ª• th·ªÉ
                try:
                    target_user = int(context.args[1])
                    if target_user in self.ai.user_memories:
                        del self.ai.user_memories[target_user]
                        await update.message.reply_text(f"üßπ ƒê√£ x√≥a b·ªô nh·ªõ AI c·ªßa user {target_user}!")
                    else:
                        await update.message.reply_text(f"‚ùå User {target_user} kh√¥ng c√≥ b·ªô nh·ªõ!")
                except ValueError:
                    await update.message.reply_text("‚ùå ID user kh√¥ng h·ª£p l·ªá!")
            else:
                # X√≥a t·∫•t c·∫£ b·ªô nh·ªõ
                self.ai.user_memories = {}
                await update.message.reply_text("üßπ ƒê√£ x√≥a s·∫°ch t·∫•t c·∫£ b·ªô nh·ªõ AI!")
            self.log_activity(user_id, "MEMORY_CLEAR")
        else:
            # Hi·ªÉn th·ªã th√¥ng tin b·ªô nh·ªõ chi ti·∫øt
            total_users = len(self.ai.user_memories)
            total_messages = sum(len(memory) for memory in self.ai.user_memories.values())

            memory_info = (
                f"üß† TH√îNG TIN B·ªò NH·ªö AI:\n"
                f"‚Ä¢ T·ªïng users c√≥ b·ªô nh·ªõ: {total_users}\n"
                f"‚Ä¢ T·ªïng tin nh·∫Øn: {total_messages}\n"
                f"‚Ä¢ Gi·ªõi h·∫°n m·ªói user: {self.ai.MAX_MEMORY} cu·ªôc h·ªôi tho·∫°i\n\n"
            )

            # Hi·ªÉn th·ªã top 5 users c√≥ nhi·ªÅu tin nh·∫Øn nh·∫•t
            if self.ai.user_memories:
                sorted_users = sorted(self.ai.user_memories.items(), 
                                    key=lambda x: len(x[1]), reverse=True)[:5]
                memory_info += "üìà Top users c√≥ nhi·ªÅu tin nh·∫Øn:\n"
                for user_id_mem, messages in sorted_users:
                    memory_info += f"‚Ä¢ User {user_id_mem}: {len(messages)//2} h·ªôi tho·∫°i\n"

            memory_info += (
                f"\nüóëÔ∏è L·ªánh:\n"
                f"/memory clear - X√≥a t·∫•t c·∫£\n"
                f"/memory clear <user_id> - X√≥a c·ªßa user c·ª• th·ªÉ"
            )
            await update.message.reply_text(memory_info)

    async def backup(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        await update.message.reply_text("üîÑ ƒêang t·∫°o backup...")

        try:
            backup_dir = f"backups/manual_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
            os.makedirs(backup_dir, exist_ok=True)

            # Backup users.json
            if os.path.exists("users.json"):
                shutil.copy2("users.json", f"{backup_dir}/users.json")

            # Backup logs
            if os.path.exists("logs"):
                shutil.copytree("logs", f"{backup_dir}/logs", dirs_exist_ok=True)

            await update.message.reply_text(
                f"‚úÖ Backup th√†nh c√¥ng!\n"
                f"üìÅ Th∆∞ m·ª•c: {backup_dir}\n"
                f"üìÖ Th·ªùi gian: {self.get_vietnam_time().strftime('%d/%m/%Y %H:%M:%S')}"
            )
            self.log_activity(user_id, "MANUAL_BACKUP", backup_dir)

        except Exception as e:
            await update.message.reply_text(f"‚ùå Backup th·∫•t b·∫°i: {str(e)}")
            self.log_activity(user_id, "BACKUP_FAILED", str(e))

    async def weather(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        # Ki·ªÉm tra quy·ªÅn - bao g·ªìm c·∫£ quy·ªÅn test
        has_regular_permission = self.admin.is_authorized(user_id)
        has_test_permission = hasattr(self, 'test_users') and user_id in self.test_users and self.test_users[user_id]['messages_left'] > 0

        if not has_regular_permission and not has_test_permission:
            await update.message.reply_text("B·∫°n ch∆∞a ƒë∆∞·ª£c c·∫•p quy·ªÅn s·ª≠ d·ª•ng bot. Li√™n h·ªá admin t·∫°i: " + ADMIN_CONTACT)
            return

        if not context.args:
            await update.message.reply_text("üå§Ô∏è H√£y nh·∫≠p t√™n th√†nh ph·ªë! V√≠ d·ª•: /weather Hanoi")
            return

        city = ' '.join(context.args)
        await update.message.reply_text("üåç ƒêang l·∫•y th√¥ng tin th·ªùi ti·∫øt...")

        # S·ª≠ d·ª•ng AI ƒë·ªÉ l·∫•y th√¥ng tin th·ªùi ti·∫øt
        weather_query = f"Th·ªùi ti·∫øt hi·ªán t·∫°i v√† d·ª± b√°o 3 ng√†y t·ªõi t·∫°i {city}, bao g·ªìm nhi·ªát ƒë·ªô, ƒë·ªô ·∫©m, t√¨nh tr·∫°ng th·ªùi ti·∫øt"
        response = self.ai.call_api(weather_query)
        formatted_response = self.ai.format_response(response)
        formatted_response = self.remove_asterisks(formatted_response)

        await update.message.reply_text(f"üå§Ô∏è Th·ªùi ti·∫øt t·∫°i {city}:\n\n{formatted_response}")
        self.log_activity(user_id, "WEATHER_CHECK", city)

    async def news(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        # Ki·ªÉm tra quy·ªÅn - bao g·ªìm c·∫£ quy·ªÅn test
        has_regular_permission = self.admin.is_authorized(user_id)
        has_test_permission = hasattr(self, 'test_users') and user_id in self.test_users and self.test_users[user_id]['messages_left'] > 0

        if not has_regular_permission and not has_test_permission:
            await update.message.reply_text("B·∫°n ch∆∞a ƒë∆∞·ª£c c·∫•p quy·ªÅn s·ª≠ d·ª•ng bot. Li√™n h·ªá admin t·∫°i: " + ADMIN_CONTACT)
            return

        await update.message.reply_text("üì∞ ƒêang c·∫≠p nh·∫≠t tin t·ª©c m·ªõi nh·∫•t...")

        # L·∫•y tin t·ª©c qua AI
        news_query = "Tin t·ª©c n√≥ng h·ªïi nh·∫•t h√¥m nay ·ªü Vi·ªát Nam v√† th·∫ø gi·ªõi, 5 tin quan tr·ªçng nh·∫•t"
        response = self.ai.call_api(news_query)
        formatted_response = self.ai.format_response(response)
        formatted_response = self.remove_asterisks(formatted_response)

        await update.message.reply_text(f"üì∞ Tin t·ª©c m·ªõi nh·∫•t:\n\n{formatted_response}")
        self.log_activity(user_id, "NEWS_CHECK")

    async def testgui(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        if not context.args:
            await update.message.reply_text("H√£y cung c·∫•p ID ng∆∞·ªùi d√πng ƒë·ªÉ test. V√≠ d·ª•: /testgui 123456789")
            return

        try:
            target_user_id = int(context.args[0])
            test_message = "üß™ TEST: ƒê√¢y l√† tin nh·∫Øn th·ª≠ nghi·ªám t·ª´ admin"

            await update.message.reply_text(f"üß™ ƒêang test g·ª≠i tin nh·∫Øn ƒë·∫øn {target_user_id}...")

            # Test g·ª≠i tin nh·∫Øn
            try:
                await context.bot.send_message(
                    chat_id=target_user_id,
                    text=test_message
                )
                await update.message.reply_text("‚úÖ Test th√†nh c√¥ng! Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i.")
            except Exception as e:
                await update.message.reply_text(f"‚ùå Test th·∫•t b·∫°i: {str(e)}")

        except ValueError:
            await update.message.reply_text("ID ng∆∞·ªùi d√πng ph·∫£i l√† s·ªë nguy√™n!")

    async def sysinfo(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        try:
            import psutil
            import platform

            # Th√¥ng tin h·ªá th·ªëng
            cpu_percent = psutil.cpu_percent(interval=1)
            memory = psutil.virtual_memory()
            disk = psutil.disk_usage('/')

            uptime_seconds = time.time() - psutil.boot_time()
            uptime_str = str(timedelta(seconds=int(uptime_seconds)))

            system_info = (
                f"üíª **TH√îNG TIN H·ªÜ TH·ªêNG:**\n"
                f"‚Ä¢ OS: {platform.system()} {platform.release()}\n"
                f"‚Ä¢ CPU: {cpu_percent}%\n"
                f"‚Ä¢ RAM: {memory.percent}% ({memory.used//1024//1024}MB/{memory.total//1024//1024}MB)\n"
                f"‚Ä¢ Disk: {disk.percent}% ({disk.used//1024//1024//1024}GB/{disk.total//1024//1024//1024}GB)\n"
                f"‚Ä¢ Uptime: {uptime_str}\n"
                f"‚Ä¢ Python: {platform.python_version()}\n"
                f"‚Ä¢ Bot Memory: {len(self.ai.memory)} messages\n"
                f"‚Ä¢ Active Users: {len(self.user_last_request)}"
            )
        except ImportError as e:
            import platform
            system_info = (
                f"üíª **TH√îNG TIN H·ªÜ TH·ªêNG (C∆° b·∫£n):**\n"
                f"‚Ä¢ OS: {platform.system()} {platform.release()}\n"
                f"‚Ä¢ Python: {platform.python_version()}\n"
                f"‚Ä¢ Bot Memory: {len(self.ai.memory)} messages\n"
                f"‚Ä¢ Active Users: {len(self.user_last_request)}\n"
                f"‚Ä¢ Uptime: {datetime.now() - self.last_backup}\n"
                f"‚Ä¢ Import Error: {str(e)}"
            )
        except Exception as e:
            import platform
            system_info = (
                f"üíª **TH√îNG TIN H·ªÜ TH·ªêNG (Fallback):**\n"
                f"‚Ä¢ OS: {platform.system()} {platform.release()}\n"
                f"‚Ä¢ Python: {platform.python_version()}\n"
                f"‚Ä¢ Bot Memory: {len(self.ai.memory)} messages\n"
                f"‚Ä¢ Error: {str(e)}"
            )

        await update.message.reply_text(system_info)
        self.log_activity(user_id, "SYSTEM_INFO")

    async def kiemtratinnhan(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        if not context.args:
            # Hi·ªÉn th·ªã danh s√°ch user c√≥ th·ªÉ ki·ªÉm tra
            users_with_chat = self.ai.get_users_with_chat_history()
            authorized_users = self.admin.get_all_users()
            
            # Th√™m user test v√†o danh s√°ch
            test_users = list(getattr(self, 'test_users', {}).keys())
            
            # K·∫øt h·ª£p authorized users v√† test users
            all_eligible_users = list(set(authorized_users + test_users))

            # L·ªçc user c√≥ l·ªãch s·ª≠ chat v√† c√≥ quy·ªÅn ho·∫∑c quy·ªÅn test
            eligible_chat_users = [(uid, count) for uid, count in users_with_chat if uid in all_eligible_users]

            if not eligible_chat_users:
                await update.message.reply_text("‚ùå Ch∆∞a c√≥ user n√†o c√≥ l·ªãch s·ª≠ chat!")
                return

            user_list = "üìù DANH S√ÅCH USER C√ì L·ªäCH S·ª¨ CHAT:\n\n"
            for user_id_chat, msg_count in eligible_chat_users:
                # Ki·ªÉm tra lo·∫°i quy·ªÅn
                user_type = ""
                if user_id_chat in authorized_users:
                    user_type = " (C√≥ quy·ªÅn)"
                elif user_id_chat in test_users:
                    remaining = self.test_users[user_id_chat]['messages_left']
                    user_type = f" (Test: {remaining} l∆∞·ª£t)"
                
                user_list += f"‚Ä¢ ID: {user_id_chat} ({msg_count} tin nh·∫Øn){user_type}\n"

            user_list += f"\nüí° S·ª≠ d·ª•ng: /kiemtratinnhan <user_id>\n"
            user_list += f"V√≠ d·ª•: /kiemtratinnhan {eligible_chat_users[0][0]}"

            await update.message.reply_text(user_list)
            return

        try:
            target_user_id = int(context.args[0])

            # Ki·ªÉm tra user c√≥ ƒë∆∞·ª£c c·∫•p quy·ªÅn ho·∫∑c quy·ªÅn test kh√¥ng
            has_regular_permission = self.admin.is_authorized(target_user_id)
            has_test_permission = hasattr(self, 'test_users') and target_user_id in self.test_users
            
            if not has_regular_permission and not has_test_permission:
                await update.message.reply_text(f"‚ùå User {target_user_id} ch∆∞a ƒë∆∞·ª£c c·∫•p quy·ªÅn ho·∫∑c quy·ªÅn test, kh√¥ng th·ªÉ ki·ªÉm tra tin nh·∫Øn!")
                return

            # L·∫•y l·ªãch s·ª≠ chat
            chat_history = self.ai.get_user_chat_history(target_user_id)

            if chat_history == "User n√†y ch∆∞a c√≥ l·ªãch s·ª≠ chat v·ªõi bot." or chat_history == "User n√†y ch∆∞a c√≥ tin nh·∫Øn n√†o.":
                await update.message.reply_text(f"üì≠ User {target_user_id} ch∆∞a c√≥ tin nh·∫Øn n√†o v·ªõi bot.")
                return

            # X√°c ƒë·ªãnh lo·∫°i quy·ªÅn ƒë·ªÉ hi·ªÉn th·ªã
            user_status = ""
            if has_regular_permission:
                user_status = " (C√≥ quy·ªÅn ch√≠nh th·ª©c)"
            elif has_test_permission:
                remaining = self.test_users[target_user_id]['messages_left']
                user_status = f" (Quy·ªÅn test: {remaining} l∆∞·ª£t c√≤n l·∫°i)"

            # Chia tin nh·∫Øn n·∫øu qu√° d√†i
            header = f"üìã L·ªäCH S·ª¨ CHAT - USER {target_user_id}{user_status}:\n" + "="*50 + "\n\n"
            full_message = header + chat_history

            if len(full_message) > 4096:
                # Chia th√†nh nhi·ªÅu tin nh·∫Øn
                await update.message.reply_text(header)
                for i in range(0, len(chat_history), 3000):
                    chunk = chat_history[i:i+3000]
                    await update.message.reply_text(chunk)
            else:
                await update.message.reply_text(full_message)

            self.log_activity(user_id, "CHECK_USER_MESSAGES", str(target_user_id))

        except ValueError:
            await update.message.reply_text("‚ùå ID ng∆∞·ªùi d√πng ph·∫£i l√† s·ªë nguy√™n h·ª£p l·ªá!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå L·ªói khi ki·ªÉm tra tin nh·∫Øn: {str(e)}")
            self.log_activity(user_id, "CHECK_MESSAGES_FAILED", str(e))

    async def chatuser(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """B·∫Øt ƒë·∫ßu chat ·∫©n danh v·ªõi user"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("üö´ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        if not context.args:
            await update.message.reply_text("‚ùå H√£y cung c·∫•p ID user ƒë·ªÉ chat.\nüìù V√≠ d·ª•: `/chatuser 123456789`")
            return

        try:
            target_user_id = int(context.args[0])
            
            # Ki·ªÉm tra user c√≥ t·ªìn t·∫°i trong h·ªá th·ªëng kh√¥ng
            all_tracked_users = self.admin.get_all_tracked_users()
            if target_user_id not in all_tracked_users:
                await update.message.reply_text(f"‚ùå User {target_user_id} ch∆∞a t·ª´ng s·ª≠ d·ª•ng bot!")
                return
            
            # Ki·ªÉm tra user c√≥ b·ªã blacklist kh√¥ng
            if target_user_id in self.blacklisted_users:
                await update.message.reply_text(f"‚ùå User {target_user_id} ƒë√£ b·ªã blacklist!")
                return
            
            # Ki·ªÉm tra admin ƒëang chat v·ªõi user kh√°c kh√¥ng
            if user_id in self.admin_chat_sessions:
                current_target = self.admin_chat_sessions[user_id]
                await update.message.reply_text(f"‚ö†Ô∏è B·∫°n ƒëang chat v·ªõi user {current_target}. S·ª≠ d·ª•ng /huychat ƒë·ªÉ k·∫øt th√∫c tr∆∞·ªõc.")
                return
            
            # B·∫Øt ƒë·∫ßu session chat ·∫©n danh
            self.admin_chat_sessions[user_id] = target_user_id
            
            # L·∫•y th√¥ng tin user
            try:
                user_info = await context.bot.get_chat(target_user_id)
                display_name = user_info.first_name or "Kh√¥ng c√≥ t√™n"
                if user_info.last_name:
                    display_name += f" {user_info.last_name}"
            except:
                display_name = "Kh√¥ng l·∫•y ƒë∆∞·ª£c t√™n"
            
            await update.message.reply_text(
                f"üí¨ **B·∫Øt ƒë·∫ßu chat ·∫©n danh v·ªõi user {target_user_id} ({display_name})**\n\n"
                f"üîπ Tin nh·∫Øn b·∫°n g·ª≠i s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn user\n"
                f"üîπ Tin nh·∫Øn user tr·∫£ l·ªùi s·∫Ω ƒë∆∞·ª£c chuy·ªÉn ƒë·∫øn b·∫°n\n"
                f"üîπ AI s·∫Ω b·ªã t·∫Øt trong phi√™n chat n√†y\n"
                f"üîπ S·ª≠ d·ª•ng `/huychat` ƒë·ªÉ k·∫øt th√∫c\n\n"
                f"‚úÖ **H√£y g·ª≠i tin nh·∫Øn ƒë·∫ßu ti√™n!**"
            )
            
            self.log_activity(user_id, "START_ANONYMOUS_CHAT", str(target_user_id))
            
        except ValueError:
            await update.message.reply_text("‚ùå ID user ph·∫£i l√† s·ªë nguy√™n!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå L·ªói khi b·∫Øt ƒë·∫ßu chat: {str(e)}")

    async def huychat(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """H·ªßy chat ·∫©n danh hi·ªán t·∫°i"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("üö´ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        if user_id not in self.admin_chat_sessions:
            await update.message.reply_text("‚ùå B·∫°n kh√¥ng c√≥ phi√™n chat ·∫©n danh n√†o ƒëang ho·∫°t ƒë·ªông!")
            return

        target_user_id = self.admin_chat_sessions[user_id]
        del self.admin_chat_sessions[user_id]
        
        # L·∫•y th√¥ng tin user
        try:
            user_info = await context.bot.get_chat(target_user_id)
            display_name = user_info.first_name or "Kh√¥ng c√≥ t√™n"
            if user_info.last_name:
                display_name += f" {user_info.last_name}"
        except:
            display_name = "Kh√¥ng l·∫•y ƒë∆∞·ª£c t√™n"
        
        await update.message.reply_text(
            f"‚úÖ **ƒê√£ k·∫øt th√∫c chat ·∫©n danh v·ªõi user {target_user_id} ({display_name})**\n\n"
            f"üîπ AI ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t l·∫°i\n"
            f"üîπ B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng `/chatuser` ƒë·ªÉ chat v·ªõi user kh√°c"
        )
        
        # Th√¥ng b√°o cho user
        try:
            await context.bot.send_message(
                chat_id=target_user_id,
                text="üí¨ **Cu·ªôc tr√≤ chuy·ªán ƒë√£ k·∫øt th√∫c**\n\nB·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c s·ª≠ d·ª•ng bot b√¨nh th∆∞·ªùng."
            )
        except:
            pass
        
        self.log_activity(user_id, "END_ANONYMOUS_CHAT", str(target_user_id))

    def remove_asterisks(self, text):
        """X√≥a t·∫•t c·∫£ k√Ω t·ª± markdown formatting kh·ªèi vƒÉn b·∫£n ƒë·ªÉ giao di·ªán s·∫°ch s·∫Ω"""
        if not text:
            return text
        # X√≥a ** (bold)
        text = text.replace("**", "")
        # X√≥a * ƒë∆°n (italic) nh∆∞ng gi·ªØ l·∫°i c√°c d·∫•u * c·∫ßn thi·∫øt
        text = text.replace("*", "")
        # X√≥a __ (underline)
        text = text.replace("__", "")
        # X√≥a ` (code)
        text = text.replace("`", "")
        # X√≥a ~~~ (strikethrough)
        text = text.replace("~~~", "")
        text = text.replace("~~", "")
        return text

    def get_vietnam_time(self):
        """L·∫•y th·ªùi gian Vi·ªát Nam (UTC+7)"""
        vn_tz = pytz.timezone('Asia/Ho_Chi_Minh')
        return datetime.now(vn_tz)

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        user_id = update.effective_user.id

        # Ki·ªÉm tra emergency mode
        if hasattr(self, 'emergency_active') and self.emergency_active:
            if not self.admin.is_admin(user_id):
                await update.message.reply_text("üö® **H·ªÜ TH·ªêNG B·∫¢O TR√å KH·∫®N C·∫§P**\n\nBot ƒëang t·∫°m d·ª´ng ho·∫°t ƒë·ªông. Vui l√≤ng th·ª≠ l·∫°i sau!")
                return
                
        # Ki·ªÉm tra maintenance mode
        if hasattr(self, 'maintenance_active') and self.maintenance_active:
            if not self.admin.is_admin(user_id):
                await update.message.reply_text("üîß **H·ªÜ TH·ªêNG ƒêANG B·∫¢O TR√å**\n\nBot ƒëang trong ch·∫ø ƒë·ªô b·∫£o tr√¨. Vui l√≤ng th·ª≠ l·∫°i sau!")
                return

        # Ki·ªÉm tra blacklist tr∆∞·ªõc ti√™n
        if user_id in self.blacklisted_users:
            await update.message.reply_text("üö´ B·∫°n ƒë√£ b·ªã ch·∫∑n vƒ©nh vi·ªÖn kh·ªèi bot.")
            return

        # Ki·ªÉm tra user suspension
        if self.is_user_suspended(user_id):
            suspend_info = self.suspended_users[user_id]
            end_time = suspend_info['end_time']
            remaining = end_time - datetime.now()
            hours_left = int(remaining.total_seconds() / 3600)
            await update.message.reply_text(
                f"‚è∏Ô∏è T√†i kho·∫£n c·ªßa b·∫°n ƒëang b·ªã t·∫°m kh√≥a.\n"
                f"‚è∞ Th·ªùi gian c√≤n l·∫°i: {hours_left} gi·ªù\n"
                f"üïê K·∫øt th√∫c: {end_time.strftime('%H:%M %d/%m/%Y')}"
            )
            return

        # Ki·ªÉm tra chat ·∫©n danh - Admin ƒëang chat v·ªõi user
        for admin_id, target_user_id in self.admin_chat_sessions.items():
            if user_id == admin_id:
                # Admin g·ª≠i tin nh·∫Øn trong chat ·∫©n danh
                message_text = update.message.text
                try:
                    await context.bot.send_message(
                        chat_id=target_user_id,
                        text=f"üí¨ **Tin nh·∫Øn t·ª´ Admin:**\n\n{message_text}"
                    )
                    await update.message.reply_text(f"‚úÖ Tin nh·∫Øn ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn user {target_user_id}")
                    self.log_activity(user_id, "ANONYMOUS_CHAT_SEND", f"To {target_user_id}: {message_text[:50]}...")
                except Exception as e:
                    await update.message.reply_text(f"‚ùå Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn: {str(e)}")
                return
            
            elif user_id == target_user_id:
                # User tr·∫£ l·ªùi trong chat ·∫©n danh
                message_text = update.message.text
                try:
                    # L·∫•y th√¥ng tin user
                    user_info = await context.bot.get_chat(user_id)
                    display_name = user_info.first_name or "User"
                    if user_info.last_name:
                        display_name += f" {user_info.last_name}"
                    
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=f"üí¨ **Tin nh·∫Øn t·ª´ {display_name} ({user_id}):**\n\n{message_text}"
                    )
                    await update.message.reply_text("‚úÖ Tin nh·∫Øn c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn Admin")
                    self.log_activity(admin_id, "ANONYMOUS_CHAT_RECEIVE", f"From {user_id}: {message_text[:50]}...")
                except Exception as e:
                    await update.message.reply_text("‚ùå C√≥ l·ªói khi g·ª≠i tin nh·∫Øn")
                return

        # Ki·ªÉm tra quy·ªÅn - bao g·ªìm c·∫£ quy·ªÅn test (ch·ªâ khi kh√¥ng trong chat ·∫©n danh)
        has_regular_permission = self.admin.is_authorized(user_id)
        has_test_permission = hasattr(self, 'test_users') and user_id in self.test_users and self.test_users[user_id]['messages_left'] > 0

        if not has_regular_permission and not has_test_permission:
            await update.message.reply_text("B·∫°n ch∆∞a ƒë∆∞·ª£c c·∫•p quy·ªÅn s·ª≠ d·ª•ng bot. Li√™n h·ªá admin t·∫°i: " + ADMIN_CONTACT)
            return

        # Rate limiting
        if self.is_rate_limited(user_id):
            await update.message.reply_text("‚è≥ Vui l√≤ng ch·ªù 2 gi√¢y tr∆∞·ªõc khi g·ª≠i tin nh·∫Øn ti·∫øp theo!")
            return

        # Auto backup ƒë·ªãnh k·ª≥
        self.auto_backup_check()

        if context.user_data.get('chatting', False):
            user_input = update.message.text
            # X√≥a k√Ω t·ª± ** t·ª´ input c·ªßa user
            user_input = self.remove_asterisks(user_input)

            # KI·ªÇM TRA L∆Ø·ª¢T TEST TR∆Ø·ªöC KHI X·ª¨ L√ù (n·∫øu c√≥ quy·ªÅn test)
            if has_test_permission and not has_regular_permission:
                remaining = self.test_users[user_id]['messages_left']
                # Ki·ªÉm tra n·∫øu h·∫øt l∆∞·ª£t test
                if remaining <= 0:
                    await update.message.reply_text("‚ùå B·∫°n ƒë√£ h·∫øt l∆∞·ª£t test! Li√™n h·ªá admin ƒë·ªÉ ƒë∆∞·ª£c c·∫•p quy·ªÅn ch√≠nh th·ª©c.")
                    context.user_data['chatting'] = False
                    return

            # G·ª≠i tin nh·∫Øn "ƒëang ph·∫£n h·ªìi"
            typing_message = await update.message.reply_text(" Zyah KingüëΩ: ƒêang ƒë·ªçc v√† ph√¢n t√≠ch...")

            try:
                # ƒê·∫£m b·∫£o AI ƒë·ªçc v√† x·ª≠ l√Ω vƒÉn b·∫£n tr∆∞·ªõc khi ph·∫£n h·ªìi v·ªõi b·ªô nh·ªõ user
                response = self.ai.call_api(user_input, user_id)
                formatted_response = self.ai.format_response(response)

                # X√≥a t·∫•t c·∫£ k√Ω t·ª± markdown formatting ƒë·ªÉ giao di·ªán s·∫°ch s·∫Ω
                formatted_response = self.remove_asterisks(formatted_response)

                # ‚úÖ CH·ªà TR·ª™ L∆Ø·ª¢T TEST KHI AI ƒê√É PH·∫¢N H·ªíI TH√ÄNH C√îNG
                if has_test_permission and not has_regular_permission:
                    self.test_users[user_id]['messages_left'] -= 1
                    print(f"üß™ Tr·ª´ 1 l∆∞·ª£t test cho user {user_id}, c√≤n l·∫°i: {self.test_users[user_id]['messages_left']}")

                # X√≥a tin nh·∫Øn "ƒëang ph·∫£n h·ªìi"
                try:
                    await typing_message.delete()
                except:
                    pass  # B·ªè qua l·ªói n·∫øu kh√¥ng x√≥a ƒë∆∞·ª£c tin nh·∫Øn

                # Th√™m th√¥ng tin tr·∫°ng th√°i b·ªô nh·ªõ v√† l∆∞·ª£t test c√≤n l·∫°i
                memory_status = self.ai.get_memory_status(user_id)

                # Hi·ªÉn th·ªã l∆∞·ª£t test c√≤n l·∫°i n·∫øu user c√≥ quy·ªÅn test
                test_status = ""
                if has_test_permission and not has_regular_permission:
                    remaining = self.test_users[user_id]['messages_left']
                    test_status = f" | Test: {remaining} l∆∞·ª£t"

                # Chia tin nh·∫Øn n·∫øu qu√° d√†i (Telegram gi·ªõi h·∫°n 4096 k√Ω t·ª±)
                # Ch·ªâ th√™m t√™n m·ªôt l·∫ßn, kh√¥ng l·∫∑p l·∫°i
                full_message = f"{formatted_response}\n\nüíæ Memory: {memory_status}{test_status}"
                if len(full_message) > 4096:
                    # Chia th√†nh nhi·ªÅu tin nh·∫Øn
                    for i in range(0, len(full_message), 4096):
                        chunk = full_message[i:i+4096]
                        chunk = self.remove_asterisks(chunk)  # ƒê·∫£m b·∫£o x√≥a ** ·ªü m·ªçi ph·∫ßn
                        await update.message.reply_text(chunk)
                else:
                    await update.message.reply_text(full_message)

                self.ai.update_memory(user_id, user_input, response)

            except Exception as e:
                # ‚ùå N·∫æU C√ì L·ªñI, KH√îNG TR·ª™ L∆Ø·ª¢T TEST
                try:
                    await typing_message.delete()
                except:
                    pass
                error_message = f" Zyah KingüëΩ: ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω. L∆∞·ª£t test kh√¥ng b·ªã tr·ª´."
                await update.message.reply_text(error_message)

    def run(self):
        max_retries = 3
        retry_count = 0

        while retry_count < max_retries:
            try:
                # ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o instance c≈© ƒë√£ t·∫Øt ho√†n to√†n
                if retry_count > 0:
                    print(f"{Colors.INFO}[üîÑ] Th·ª≠ l·∫°i l·∫ßn {retry_count + 1}...{Colors.RESET}")
                    time.sleep(5)

                if self.is_new_version:
                    # Phi√™n b·∫£n m·ªõi
                    self.app.add_handler(CommandHandler("start", self.start))
                    self.app.add_handler(CommandHandler("help", self.help))
                    self.app.add_handler(CommandHandler("chatai", self.chatai))
                    self.app.add_handler(CommandHandler("thongtinad", self.thongtinad))

                    self.app.add_handler(CommandHandler("mua", self.mua))
                    self.app.add_handler(CommandHandler("capquyen", self.capquyen))
                    self.app.add_handler(CommandHandler("xoaquyen", self.xoaquyen))
                    self.app.add_handler(CommandHandler("thongbao", self.thongbao))
                    self.app.add_handler(CommandHandler("kiemtra", self.kiemtra))

                    # T√≠nh nƒÉng c≈©
                    self.app.add_handler(CommandHandler("status", self.status))
                    self.app.add_handler(CommandHandler("memory", self.memory))
                    self.app.add_handler(CommandHandler("backup", self.backup))

                    # T√≠nh nƒÉng m·ªõi
                    self.app.add_handler(CommandHandler("weather", self.weather))
                    self.app.add_handler(CommandHandler("news", self.news))
                    self.app.add_handler(CommandHandler("testgui", self.testgui))
                    self.app.add_handler(CommandHandler("sysinfo", self.sysinfo))
                    self.app.add_handler(CommandHandler("kiemtratinnhan", self.kiemtratinnhan))
                    # Add /test command handler
                    self.app.add_handler(CommandHandler("test", self.test_user))
                    self.app.add_handler(CommandHandler("xoatest", self.remove_test))
                    self.app.add_handler(CommandHandler("testall", self.test_all))
                    self.app.add_handler(CommandHandler("xoatestall", self.remove_all_tests))
                    
                    # Advanced admin features
                    self.app.add_handler(CommandHandler("monitor", self.monitor_users))
                    self.app.add_handler(CommandHandler("analytics", self.analytics))
                    self.app.add_handler(CommandHandler("blacklist", self.blacklist_user))
                    self.app.add_handler(CommandHandler("unblacklist", self.unblacklist_user))
                    self.app.add_handler(CommandHandler("broadcast_vip", self.broadcast_vip))
                    self.app.add_handler(CommandHandler("force_stop", self.force_stop_user))
                    self.app.add_handler(CommandHandler("ai_stats", self.ai_statistics))
                    self.app.add_handler(CommandHandler("user_profile", self.user_profile))
                    self.app.add_handler(CommandHandler("mass_action", self.mass_action))
                    self.app.add_handler(CommandHandler("security_scan", self.security_scan))
                    
                    # Anonymous chat features
                    self.app.add_handler(CommandHandler("chatuser", self.chatuser))
                    self.app.add_handler(CommandHandler("huychat", self.huychat))
                    
                    # Advanced admin panels
                    self.app.add_handler(CommandHandler("admin_panel", self.admin_panel))
                    self.app.add_handler(CommandHandler("admin_stats", self.admin_stats))
                    self.app.add_handler(CommandHandler("admin_tools", self.admin_tools))
                    self.app.add_handler(CommandHandler("emergency_mode", self.emergency_mode))
                    self.app.add_handler(CommandHandler("maintenance_mode", self.maintenance_mode))
                    self.app.add_handler(CommandHandler("system_monitor", self.system_monitor))
                    self.app.add_handler(CommandHandler("advanced_admin", self.advanced_admin))

                    self.app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))

                    print(f"{Colors.INFO}[üåå] Zyah KingüëΩ ƒëang kh·ªüi ƒë·ªông v·ªõi t√≠nh nƒÉng m·ªõi...{Colors.RESET}")
                    self.log_activity("SYSTEM", "BOT_START")

                    print(f"{Colors.SUCCESS}[üåå] Zyah KingüëΩ ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng!{Colors.RESET}")
                    self.log_activity("SYSTEM", "BOT_START")
                    self.app.run_polling()
                    break  # Tho√°t loop n·∫øu ch·∫°y th√†nh c√¥ng

                else:
                    # Phi√™n b·∫£n c≈© - compatibility mode
                    dp = self.app.dispatcher

                    dp.add_handler(CommandHandler("start", self.start))
                    dp.add_handler(CommandHandler("help", self.help))
                    dp.add_handler(CommandHandler("chatai", self.chatai))
                    dp.add_handler(CommandHandler("thongtinad", self.thongtinad))
                    dp.add_handler(CommandHandler("mua", self.mua))
                    dp.add_handler(CommandHandler("capquyen", self.capquyen))
                    dp.add_handler(CommandHandler("xoaquyen", self.xoaquyen))
                    dp.add_handler(CommandHandler("thongbao", self.thongbao))
                    dp.add_handler(CommandHandler("kiemtra", self.kiemtra))
                    dp.add_handler(CommandHandler("status", self.status))
                    dp.add_handler(CommandHandler("memory", self.memory))
                    dp.add_handler(CommandHandler("backup", self.backup))
                    dp.add_handler(CommandHandler("weather", self.weather))
                    dp.add_handler(CommandHandler("news", self.news))
                    dp.add_handler(CommandHandler("testgui", self.testgui))
                    dp.add_handler(CommandHandler("sysinfo", self.sysinfo))
                    dp.add_handler(CommandHandler("kiemtratinnhan", self.kiemtratinnhan))
                    # Add /test command handler
                    dp.add_handler(CommandHandler("test", self.test_user))
                    dp.add_handler(CommandHandler("xoatest", self.remove_test))
                    dp.add_handler(CommandHandler("testall", self.test_all))
                    dp.add_handler(CommandHandler("xoatestall", self.remove_all_tests))
                    
                    # Advanced admin features
                    dp.add_handler(CommandHandler("monitor", self.monitor_users))
                    dp.add_handler(CommandHandler("analytics", self.analytics))
                    dp.add_handler(CommandHandler("blacklist", self.blacklist_user))
                    dp.add_handler(CommandHandler("unblacklist", self.unblacklist_user))
                    dp.add_handler(CommandHandler("broadcast_vip", self.broadcast_vip))
                    dp.add_handler(CommandHandler("force_stop", self.force_stop_user))
                    dp.add_handler(CommandHandler("ai_stats", self.ai_statistics))
                    dp.add_handler(CommandHandler("user_profile", self.user_profile))
                    dp.add_handler(CommandHandler("mass_action", self.mass_action))
                    dp.add_handler(CommandHandler("security_scan", self.security_scan))
                    
                    # Anonymous chat features
                    dp.add_handler(CommandHandler("chatuser", self.chatuser))
                    dp.add_handler(CommandHandler("huychat", self.huychat))
                    
                    # Advanced admin panels
                    dp.add_handler(CommandHandler("admin_panel", self.admin_panel))
                    dp.add_handler(CommandHandler("admin_stats", self.admin_stats))
                    dp.add_handler(CommandHandler("admin_tools", self.admin_tools))
                    dp.add_handler(CommandHandler("emergency_mode", self.emergency_mode))
                    dp.add_handler(CommandHandler("maintenance_mode", self.maintenance_mode))
                    dp.add_handler(CommandHandler("system_monitor", self.system_monitor))
                    dp.add_handler(CommandHandler("advanced_admin", self.advanced_admin))

                    dp.add_handler(MessageHandler(filters.text & ~filters.command, self.handle_message))

                    print(f"{Colors.SUCCESS}[üåå] Zyah KingüëΩ ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng (compatibility mode)!{Colors.RESET}")
                    self.log_activity("SYSTEM", "BOT_START")

                    self.app.start_polling()
                    self.app.idle()
                    break  # Tho√°t loop n·∫øu ch·∫°y th√†nh c√¥ng

            except KeyboardInterrupt:
                print(f"{Colors.INFO}[üëã] Bot ƒë√£ ƒë∆∞·ª£c d·ª´ng b·ªüi user{Colors.RESET}")
                self.cleanup()
                break

            except Exception as e:
                error_msg = str(e).lower()
                if 'conflict' in error_msg and 'getupdates' in error_msg:
                    print(f"{Colors.WARNING}[‚ö†Ô∏è] Ph√°t hi·ªán conflict v·ªõi instance kh√°c: {e}{Colors.RESET}")
                    retry_count += 1
                    if retry_count >= max_retries:
                        print(f"{Colors.ERROR}[üí•] ƒê√£ th·ª≠ {max_retries} l·∫ßn, bot kh√¥ng th·ªÉ kh·ªüi ƒë·ªông{Colors.RESET}")
                        self.cleanup()
                        break
                    else:
                        print(f"{Colors.INFO}[üîÑ] ƒêang c·ªë g·∫Øng d·ª´ng c√°c instance kh√°c...{Colors.RESET}")
                        self.check_running_instance()  # Th·ª≠ d·ª´ng instance kh√°c l·∫°i
                        continue
                elif 'network' in error_msg or 'timeout' in error_msg:
                    print(f"{Colors.WARNING}[‚ö†Ô∏è] Network issue: {e}{Colors.RESET}")
                    retry_count += 1
                    if retry_count < max_retries:
                        print(f"{Colors.INFO}[üîÑ] Th·ª≠ k·∫øt n·ªëi l·∫°i sau 10 gi√¢y...{Colors.RESET}")
                        time.sleep(10)
                        continue
                    else:
                        print(f"{Colors.ERROR}[üí•] Kh√¥ng th·ªÉ k·∫øt n·ªëi sau {max_retries} l·∫ßn th·ª≠{Colors.RESET}")
                        self.cleanup()
                        break
                else:
                    print(f"{Colors.ERROR}[üí•] Bot crashed: {e}{Colors.RESET}")
                    print(f"{Colors.INFO}[‚ÑπÔ∏è] Chi ti·∫øt l·ªói: {type(e).__name__}{Colors.RESET}")
                    self.cleanup()
                    break

    async def test_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """C·∫•p quy·ªÅn test cho user c·ª• th·ªÉ"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        if len(context.args) < 2:
            await update.message.reply_text("‚ùå H√£y cung c·∫•p ID user v√† s·ªë l∆∞·ª£ng tin nh·∫Øn test.\nüìù V√≠ d·ª•: `/test 123456789 5`")
            return

        try:
            target_user_id = int(context.args[0])
            messages_count = int(context.args[1])

            # Validation
            if target_user_id <= 0 or len(str(target_user_id)) < 5:
                await update.message.reply_text("‚ùå ID ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá!")
                return

            if messages_count <= 0 or messages_count > 50:
                await update.message.reply_text("‚ùå S·ªë l∆∞·ª£ng tin nh·∫Øn ph·∫£i t·ª´ 1-50!")
                return

            # Ki·ªÉm tra user ƒë√£ c√≥ quy·ªÅn ch√≠nh th·ª©c ch∆∞a
            if self.admin.is_authorized(target_user_id):
                await update.message.reply_text(f"‚ùå User {target_user_id} ƒë√£ c√≥ quy·ªÅn ch√≠nh th·ª©c, kh√¥ng c·∫ßn test!")
                return

            # Kh·ªüi t·∫°o test_users n·∫øu ch∆∞a c√≥
            if not hasattr(self, 'test_users'):
                self.test_users = {}

            # C·∫•p quy·ªÅn test
            self.test_users[target_user_id] = {
                'messages_left': messages_count,
                'granted_at': datetime.now(),
                'granted_by': user_id
            }

            await update.message.reply_text(f"‚úÖ ƒê√£ c·∫•p {messages_count} l∆∞·ª£t test cho user {target_user_id}!")

            # G·ª≠i th√¥ng b√°o ƒë·∫øn user ƒë∆∞·ª£c c·∫•p quy·ªÅn test
            try:
                user_info = await context.bot.get_chat(target_user_id)
                display_name = user_info.first_name or "b·∫°n"
                if user_info.last_name:
                    display_name += f" {user_info.last_name}"

                test_message = (
                    f"üß™ **TH√îNG B√ÅO TEST T·ª™ ADMIN** üß™\n\n"
                    f"üëã Ch√†o **{display_name}**!\n\n"
                    f"‚úÖ B·∫°n ƒë√£ ƒë∆∞·ª£c c·∫•p **{messages_count} l∆∞·ª£t test** ƒë·ªÉ tr·∫£i nghi·ªám **Zyah KingüëΩ**!\n\n"
                    f"üìù **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:**\n"
                    f"1. G√µ `/chatai` ƒë·ªÉ b·∫Øt ƒë·∫ßu chat\n"
                    f"2. G·ª≠i tin nh·∫Øn ƒë·ªÉ tr√≤ chuy·ªán v·ªõi AI\n\n"
                    f"üí° **L∆∞u √Ω:** L∆∞·ª£t test ch·ªâ b·ªã tr·ª´ khi b·∫°n g·ª≠i tin nh·∫Øn tr·∫£ l·ªùi, kh√¥ng ph·∫£i khi g√µ l·ªánh!\n\n"
                    f"üöÄ H√£y tr·∫£i nghi·ªám s·ª©c m·∫°nh c·ªßa AI!"
                )

                await context.bot.send_message(
                    chat_id=target_user_id,
                    text=test_message,
                    parse_mode='Markdown'
                )

                await update.message.reply_text(f"üì¢ ƒê√£ g·ª≠i th√¥ng b√°o test ƒë·∫øn user {target_user_id}!")

            except Exception as e:
                await update.message.reply_text(f"‚ö†Ô∏è ƒê√£ c·∫•p quy·ªÅn test th√†nh c√¥ng nh∆∞ng kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o: {str(e)}")

            self.log_activity(user_id, "GRANT_TEST_PERMISSION", f"{target_user_id} - {messages_count} messages")

        except ValueError:
            await update.message.reply_text("‚ùå ID user v√† s·ªë l∆∞·ª£ng tin nh·∫Øn ph·∫£i l√† s·ªë nguy√™n!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå L·ªói khi c·∫•p quy·ªÅn test: {str(e)}")

    async def remove_test(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """X√≥a quy·ªÅn test c·ªßa user c·ª• th·ªÉ"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        if not context.args:
            await update.message.reply_text("‚ùå H√£y cung c·∫•p ID user.\nüìù V√≠ d·ª•: `/xoatest 123456789`")
            return

        try:
            target_user_id = int(context.args[0])

            if not hasattr(self, 'test_users') or target_user_id not in self.test_users:
                await update.message.reply_text(f"‚ùå User {target_user_id} kh√¥ng c√≥ quy·ªÅn test!")
                return

            # X√≥a quy·ªÅn test
            del self.test_users[target_user_id]

            await update.message.reply_text(f"‚úÖ ƒê√£ x√≥a quy·ªÅn test c·ªßa user {target_user_id}!")

            # G·ª≠i th√¥ng b√°o ƒë·∫øn user b·ªã x√≥a quy·ªÅn test
            try:
                from config import SUB_ADMIN_CONTACT

                # L·∫•y t√™n Telegram th·∫≠t c·ªßa user
                try:
                    user_info = await context.bot.get_chat(target_user_id)
                    telegram_name = user_info.first_name or "b·∫°n"
                    if user_info.last_name:
                        telegram_name += f" {user_info.last_name}"
                except:
                    telegram_name = "b·∫°n"

                # T·∫°o inline keyboard v·ªõi 2 admin
                keyboard = [
                    [InlineKeyboardButton("üëë Nhayy", url=ADMIN_CONTACT)],
                    [InlineKeyboardButton("‚≠ê Uy Han", url=SUB_ADMIN_CONTACT)]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                revoke_test_message = (
                    f"üß™ **TH√îNG B√ÅO T·ª™ ADMIN** üß™\n\n"
                    f"üëã Ch√†o **{telegram_name}**!\n\n"
                    f"‚ùå Quy·ªÅn test c·ªßa b·∫°n ƒë√£ **h·∫øt h·∫°n s·ª≠ d·ª•ng**.\n\n"
                    f"üôè **C·∫£m ∆°n b·∫°n ƒë√£ tr·∫£i nghi·ªám Zyah KingüëΩ!**\n\n"
                    f"üí´ **Mu·ªën ti·∫øp t·ª•c s·ª≠ d·ª•ng nh·ªØng t√≠nh nƒÉng tuy·ªát v·ªùi?**\n"
                    f"üìû H√£y li√™n h·ªá v·ªõi admin ƒë·ªÉ **n√¢ng c·∫•p l√™n quy·ªÅn ch√≠nh th·ª©c** üëá"
                )

                await context.bot.send_message(
                    chat_id=target_user_id,
                    text=revoke_test_message,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )

                await update.message.reply_text(f"üì¢ ƒê√£ g·ª≠i th√¥ng b√°o h·∫øt h·∫°n test ƒë·∫øn user {target_user_id} ({telegram_name})!")

            except Exception as e:
                await update.message.reply_text(f"‚ö†Ô∏è ƒê√£ x√≥a quy·ªÅn test th√†nh c√¥ng nh∆∞ng kh√¥ng th·ªÉ g·ª≠i th√¥ng b√°o: {str(e)}")

            self.log_activity(user_id, "REMOVE_TEST_PERMISSION", str(target_user_id))

        except ValueError:
            await update.message.reply_text("‚ùå ID user ph·∫£i l√† s·ªë nguy√™n!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå L·ªói khi x√≥a quy·ªÅn test: {str(e)}")

    async def test_all(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """C·∫•p quy·ªÅn test cho t·∫•t c·∫£ user ch∆∞a c√≥ quy·ªÅn"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        if not context.args:
            await update.message.reply_text("‚ùå H√£y cung c·∫•p s·ªë l∆∞·ª£ng tin nh·∫Øn test.\nüìù V√≠ d·ª•: `/testall 5`")
            return

        try:
            messages_count = int(context.args[0])

            if messages_count <= 0 or messages_count > 50:
                await update.message.reply_text("‚ùå S·ªë l∆∞·ª£ng tin nh·∫Øn ph·∫£i t·ª´ 1-50!")
                return

            # L·∫•y t·∫•t c·∫£ user ƒë√£ t·ª´ng s·ª≠ d·ª•ng bot
            all_tracked_users = self.admin.get_all_tracked_users()
            FIXED_ADMIN_IDS = [7073749415, 7444696176]
            authorized_users = [uid for uid in self.admin.authorized_users["users"] if uid not in FIXED_ADMIN_IDS]

            # L·ªçc user ch∆∞a c√≥ quy·ªÅn v√† ch∆∞a c√≥ quy·ªÅn test
            if not hasattr(self, 'test_users'):
                self.test_users = {}

            target_users = []
            for uid in all_tracked_users:
                if (uid not in FIXED_ADMIN_IDS and 
                    uid not in authorized_users and 
                    uid not in self.test_users):
                    target_users.append(uid)

            if not target_users:
                await update.message.reply_text("‚ùå Kh√¥ng c√≥ user n√†o ƒë·ªÉ c·∫•p quy·ªÅn test!")
                return

            await update.message.reply_text(f"üß™ ƒêang c·∫•p {messages_count} l∆∞·ª£t test cho {len(target_users)} user...")

            success_count = 0
            fail_count = 0

            for target_user_id in target_users:
                try:
                    # C·∫•p quy·ªÅn test
                    self.test_users[target_user_id] = {
                        'messages_left': messages_count,
                        'granted_at': datetime.now(),
                        'granted_by': user_id
                    }

                    # G·ª≠i th√¥ng b√°o
                    try:
                        user_info = await context.bot.get_chat(target_user_id)
                        display_name = user_info.first_name or "b·∫°n"
                        if user_info.last_name:
                            display_name += f" {user_info.last_name}"

                        test_message = (
                            f"üß™ **TH√îNG B√ÅO TEST T·ª™ ADMIN** üß™\n\n"
                            f"üëã Ch√†o **{display_name}**!\n\n"
                            f"‚úÖ B·∫°n ƒë√£ ƒë∆∞·ª£c c·∫•p **{messages_count} l∆∞·ª£t test** ƒë·ªÉ tr·∫£i nghi·ªám **Zyah KingüëΩ**!\n\n"
                            f"üìù **H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:**\n"
                            f"1. G√µ `/chatai` ƒë·ªÉ b·∫Øt ƒë·∫ßu chat\n"
                            f"2. G·ª≠i tin nh·∫Øn ƒë·ªÉ tr√≤ chuy·ªán v·ªõi AI\n\n"
                            f"üí° **L∆∞u √Ω:** L∆∞·ª£t test ch·ªâ b·ªã tr·ª´ khi b·∫°n g·ª≠i tin nh·∫Øn tr·∫£ l·ªùi, kh√¥ng ph·∫£i khi g√µ l·ªánh!\n\n"
                            f"üöÄ H√£y tr·∫£i nghi·ªám s·ª©c m·∫°nh c·ªßa AI!"
                        )

                        await context.bot.send_message(
                            chat_id=target_user_id,
                            text=test_message,
                            parse_mode='Markdown'
                        )

                        success_count += 1

                    except Exception:
                        success_count += 1  # V·∫´n t√≠nh th√†nh c√¥ng v√¨ ƒë√£ c·∫•p quy·ªÅn

                except Exception:
                    fail_count += 1

            report = (
                f"‚úÖ Ho√†n t·∫•t c·∫•p quy·ªÅn test!\n"
                f"‚Ä¢ Th√†nh c√¥ng: {success_count}/{len(target_users)} user\n"
                f"‚Ä¢ Th·∫•t b·∫°i: {fail_count}/{len(target_users)} user"
            )

            await update.message.reply_text(report)
            self.log_activity(user_id, "GRANT_TEST_ALL", f"Success: {success_count}, Failed: {fail_count}")

        except ValueError:
            await update.message.reply_text("‚ùå S·ªë l∆∞·ª£ng tin nh·∫Øn ph·∫£i l√† s·ªë nguy√™n!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå L·ªói khi c·∫•p quy·ªÅn test: {str(e)}")

    async def remove_all_tests(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """X√≥a quy·ªÅn test c·ªßa t·∫•t c·∫£ user"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        if not hasattr(self, 'test_users') or not self.test_users:
            await update.message.reply_text("‚ùå Kh√¥ng c√≥ user n√†o c√≥ quy·ªÅn test!")
            return

        # L·∫•y danh s√°ch user c√≥ quy·ªÅn test tr∆∞·ªõc khi x√≥a
        test_user_ids = list(self.test_users.keys())
        count = len(test_user_ids)

        await update.message.reply_text(f"üß™ ƒêang x√≥a quy·ªÅn test c·ªßa {count} user v√† g·ª≠i th√¥ng b√°o...")

        success_notify = 0
        fail_notify = 0

        # G·ª≠i th√¥ng b√°o ƒë·∫øn t·∫•t c·∫£ user b·ªã x√≥a quy·ªÅn test
        for target_user_id in test_user_ids:
            try:
                from config import SUB_ADMIN_CONTACT

                # L·∫•y t√™n Telegram th·∫≠t c·ªßa user
                try:
                    user_info = await context.bot.get_chat(target_user_id)
                    telegram_name = user_info.first_name or "b·∫°n"
                    if user_info.last_name:
                        telegram_name += f" {user_info.last_name}"
                except:
                    telegram_name = "b·∫°n"

                # T·∫°o inline keyboard v·ªõi 2 admin
                keyboard = [
                    [InlineKeyboardButton("üëë Nhayy", url=ADMIN_CONTACT)],
                    [InlineKeyboardButton("‚≠ê Uy Han", url=SUB_ADMIN_CONTACT)]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)

                revoke_all_test_message = (
                    f"üß™ **TH√îNG B√ÅO QUAN TR·ªåNG T·ª™ ADMIN** üß™\n\n"
                    f"üëã Ch√†o **{telegram_name}**!\n\n"
                    f"‚ùå **ƒê·ª£t test trial ƒë√£ k·∫øt th√∫c**, quy·ªÅn test c·ªßa b·∫°n ƒë√£ h·∫øt h·∫°n.\n\n"
                    f"üôè **C·∫£m ∆°n b·∫°n ƒë√£ tham gia tr·∫£i nghi·ªám Zyah KingüëΩ!**\n\n"
                    f"üöÄ **B·∫°n ƒë√£ th·∫•y s·ª©c m·∫°nh tuy·ªát v·ªùi c·ªßa AI ch∆∞a?**\n"
                    f"üí´ **Mu·ªën s·ªü h·ªØu tr·ªçn v·∫πn nh·ªØng t√≠nh nƒÉng ƒë·ªânh cao n√†y?**\n"
                    f"üìû Li√™n h·ªá admin ngay ƒë·ªÉ **n√¢ng c·∫•p l√™n quy·ªÅn ch√≠nh th·ª©c** üëá"
                )

                await context.bot.send_message(
                    chat_id=target_user_id,
                    text=revoke_all_test_message,
                    reply_markup=reply_markup,
                    parse_mode='Markdown'
                )

                success_notify += 1

            except Exception:
                fail_notify += 1

        # X√≥a t·∫•t c·∫£ quy·ªÅn test
        self.test_users = {}

        # B√°o c√°o k·∫øt qu·∫£
        report = (
            f"‚úÖ Ho√†n t·∫•t x√≥a quy·ªÅn test c·ªßa {count} user!\n"
            f"üì¢ Th√¥ng b√°o th√†nh c√¥ng: {success_notify}/{count}\n"
            f"‚ùå Th√¥ng b√°o th·∫•t b·∫°i: {fail_notify}/{count}"
        )

        await update.message.reply_text(report)
        self.log_activity(user_id, "REMOVE_ALL_TESTS", f"Removed {count} users, Notified: {success_notify}")

    def load_blacklist(self):
        """Load blacklist t·ª´ file"""
        try:
            if os.path.exists("blacklist.json"):
                with open("blacklist.json", 'r') as f:
                    data = json.load(f)
                    self.blacklisted_users = set(data.get("blacklisted", []))
        except:
            self.blacklisted_users = set()

    def save_blacklist(self):
        """Save blacklist v√†o file"""
        try:
            with open("blacklist.json", 'w') as f:
                json.dump({"blacklisted": list(self.blacklisted_users)}, f, indent=4)
        except Exception as e:
            print(f"Error saving blacklist: {e}")

    async def monitor_users(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Theo d√µi ho·∫°t ƒë·ªông user real-time"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("üö´ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        # L·∫•y th·ªëng k√™ real-time
        active_users = len(self.user_last_request)
        chat_sessions = len(self.ai.user_memories) if hasattr(self.ai, 'user_memories') else 0
        
        # Top 5 users ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y
        recent_activities = sorted(self.user_last_request.items(), 
                                 key=lambda x: x[1], reverse=True)[:5]
        
        monitor_text = (
            f"üìä **GI√ÅM S√ÅT REAL-TIME** üìä\n"
            f"üïê C·∫≠p nh·∫≠t: {self.get_vietnam_time().strftime('%H:%M:%S %d/%m/%Y')}\n\n"
            f"üë• **T·ªïng quan:**\n"
            f"‚Ä¢ Users ho·∫°t ƒë·ªông: {active_users}\n"
            f"‚Ä¢ Chat sessions: {chat_sessions}\n"
            f"‚Ä¢ Blacklisted: {len(self.blacklisted_users)}\n\n"
            f"üî• **Top ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y:**\n"
        )
        
        for i, (uid, last_time) in enumerate(recent_activities, 1):
            time_ago = datetime.now() - last_time
            minutes_ago = int(time_ago.total_seconds() / 60)
            monitor_text += f"{i}. User {uid} - {minutes_ago} ph√∫t tr∆∞·ªõc\n"
        
        # Th√™m c·∫£nh b√°o b·∫£o m·∫≠t n·∫øu c√≥
        if self.security_logs:
            recent_alerts = [log for log in self.security_logs[-5:] if (datetime.now() - log['time']).total_seconds() < 3600]
            if recent_alerts:
                monitor_text += f"\n‚ö†Ô∏è **C·∫£nh b√°o (1h qua): {len(recent_alerts)} alerts**"
        
        monitor_text += f"\n\nüîÑ S·ª≠ d·ª•ng l·∫°i /monitor ƒë·ªÉ refresh"
        
        await update.message.reply_text(monitor_text, parse_mode='Markdown')
        self.log_activity(user_id, "MONITOR_USERS")

    async def analytics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Th·ªëng k√™ chi ti·∫øt v√† analytics"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("üö´ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        # T√≠nh to√°n analytics chi ti·∫øt
        total_users = len(self.admin.get_all_tracked_users())
        authorized_users = len(self.admin.get_all_users())
        test_users_count = len(getattr(self, 'test_users', {}))
        
        # Th·ªëng k√™ AI usage
        total_messages = sum(len(memory) for memory in self.ai.user_memories.values()) if hasattr(self.ai, 'user_memories') else 0
        avg_messages_per_user = total_messages / max(len(self.ai.user_memories), 1) if hasattr(self.ai, 'user_memories') else 0
        
        # Th·ªëng k√™ th·ªùi gian
        current_time = self.get_vietnam_time()
        uptime = current_time - self.last_backup
        
        analytics_text = (
            f"üìà **ANALYTICS DASHBOARD** üìà\n"
            f"üïê Generated: {current_time.strftime('%H:%M:%S %d/%m/%Y')}\n"
            f"‚è±Ô∏è Uptime: {str(uptime).split('.')[0]}\n\n"
            f"üë• **User Statistics:**\n"
            f"‚Ä¢ Total registered: {total_users}\n"
            f"‚Ä¢ Authorized users: {authorized_users}\n"
            f"‚Ä¢ Test users: {test_users_count}\n"
            f"‚Ä¢ Blacklisted: {len(self.blacklisted_users)}\n"
            f"‚Ä¢ Conversion rate: {(authorized_users/max(total_users,1)*100):.1f}%\n\n"
            f"ü§ñ **AI Performance:**\n"
            f"‚Ä¢ Total conversations: {total_messages//2}\n"
            f"‚Ä¢ Avg msgs/user: {avg_messages_per_user/2:.1f}\n"
            f"‚Ä¢ Active sessions: {len(self.ai.user_memories) if hasattr(self.ai, 'user_memories') else 0}\n"
            f"‚Ä¢ Memory usage: {total_messages}/{len(self.ai.user_memories) * self.ai.MAX_MEMORY if hasattr(self.ai, 'user_memories') else 0}\n\n"
            f"üìä **System Health:**\n"
            f"‚Ä¢ Rate limit violations: {len([u for u in self.user_last_request if (datetime.now() - self.user_last_request[u]).total_seconds() < self.rate_limit_seconds])}\n"
            f"‚Ä¢ Security alerts: {len(self.security_logs)}\n"
            f"‚Ä¢ Last backup: {self.last_backup.strftime('%d/%m/%Y %H:%M')}\n\n"
            f"üéØ **Growth Metrics:**\n"
            f"‚Ä¢ New users today: {len([u for u in self.admin.get_all_tracked_users() if u not in self.admin.get_all_users()])}\n"
            f"‚Ä¢ Engagement rate: {(len(self.user_last_request)/max(total_users,1)*100):.1f}%"
        )
        
        await update.message.reply_text(analytics_text, parse_mode='Markdown')
        self.log_activity(user_id, "VIEW_ANALYTICS")

    async def blacklist_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Ch·∫∑n user vƒ©nh vi·ªÖn"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("üö´ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        if not context.args:
            await update.message.reply_text("‚ùå H√£y cung c·∫•p ID user c·∫ßn ch·∫∑n.\nüìù V√≠ d·ª•: `/blacklist 123456789`")
            return

        try:
            target_user_id = int(context.args[0])
            
            # Kh√¥ng th·ªÉ blacklist admin
            if self.admin.is_admin(target_user_id):
                await update.message.reply_text("‚ùå Kh√¥ng th·ªÉ blacklist Admin!")
                return
            
            if target_user_id in self.blacklisted_users:
                await update.message.reply_text(f"‚ùå User {target_user_id} ƒë√£ b·ªã blacklist!")
                return
            
            # Th√™m v√†o blacklist
            self.blacklisted_users.add(target_user_id)
            self.save_blacklist()
            
            # X√≥a quy·ªÅn n·∫øu c√≥
            if self.admin.is_authorized(target_user_id):
                self.admin.remove_user(str(target_user_id))
            
            # X√≥a quy·ªÅn test n·∫øu c√≥
            if hasattr(self, 'test_users') and target_user_id in self.test_users:
                del self.test_users[target_user_id]
            
            # X√≥a kh·ªèi chat session
            if hasattr(self.ai, 'user_memories') and target_user_id in self.ai.user_memories:
                del self.ai.user_memories[target_user_id]
            
            await update.message.reply_text(f"üö´ ƒê√£ blacklist user {target_user_id} vƒ©nh vi·ªÖn!")
            
            # G·ª≠i th√¥ng b√°o ƒë·∫øn user b·ªã blacklist
            try:
                await context.bot.send_message(
                    chat_id=target_user_id,
                    text="üö´ **B·∫†N ƒê√É B·ªä CH·∫∂N Vƒ®NH VI·ªÑN**\n\nT√†i kho·∫£n c·ªßa b·∫°n ƒë√£ b·ªã ch·∫∑n do vi ph·∫°m quy ƒë·ªãnh s·ª≠ d·ª•ng bot.",
                    parse_mode='Markdown'
                )
            except:
                pass
            
            self.log_activity(user_id, "BLACKLIST_USER", str(target_user_id))
            
        except ValueError:
            await update.message.reply_text("‚ùå ID user ph·∫£i l√† s·ªë nguy√™n!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå L·ªói khi blacklist: {str(e)}")

    async def unblacklist_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """B·ªè ch·∫∑n user"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("üö´ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        if not context.args:
            await update.message.reply_text("‚ùå H√£y cung c·∫•p ID user c·∫ßn b·ªè ch·∫∑n.\nüìù V√≠ d·ª•: `/unblacklist 123456789`")
            return

        try:
            target_user_id = int(context.args[0])
            
            if target_user_id not in self.blacklisted_users:
                await update.message.reply_text(f"‚ùå User {target_user_id} kh√¥ng b·ªã blacklist!")
                return
            
            # X√≥a kh·ªèi blacklist
            self.blacklisted_users.remove(target_user_id)
            self.save_blacklist()
            
            await update.message.reply_text(f"‚úÖ ƒê√£ b·ªè ch·∫∑n user {target_user_id}!")
            
            # G·ª≠i th√¥ng b√°o ƒë·∫øn user ƒë∆∞·ª£c b·ªè ch·∫∑n
            try:
                await context.bot.send_message(
                    chat_id=target_user_id,
                    text="‚úÖ **T√ÄI KHO·∫¢N ƒê√É ƒê∆Ø·ª¢C KH√îI PH·ª§C**\n\nB·∫°n ƒë√£ ƒë∆∞·ª£c b·ªè ch·∫∑n v√† c√≥ th·ªÉ s·ª≠ d·ª•ng bot tr·ªü l·∫°i.",
                    parse_mode='Markdown'
                )
            except:
                pass
            
            self.log_activity(user_id, "UNBLACKLIST_USER", str(target_user_id))
            
        except ValueError:
            await update.message.reply_text("‚ùå ID user ph·∫£i l√† s·ªë nguy√™n!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå L·ªói khi unblacklist: {str(e)}")

    async def broadcast_vip(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """G·ª≠i th√¥ng b√°o VIP v·ªõi format ƒë·∫πp"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("üö´ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        if not context.args:
            await update.message.reply_text("‚ùå H√£y nh·∫≠p n·ªôi dung th√¥ng b√°o VIP.\nüìù V√≠ d·ª•: `/broadcast_vip C·∫≠p nh·∫≠t t√≠nh nƒÉng m·ªõi!`")
            return

        message = ' '.join(context.args)
        
        # Format VIP message
        vip_message = (
            f"üëë **TH√îNG B√ÅO VIP T·ª™ ZYAH KINGüëΩ** üëë\n"
            f"{'‚ïê' * 40}\n\n"
            f"üåü {message}\n\n"
            f"{'‚ïê' * 40}\n"
            f"üïê Th·ªùi gian: {self.get_vietnam_time().strftime('%H:%M %d/%m/%Y')}\n"
            f"üìû Li√™n h·ªá: {ADMIN_CONTACT}\n"
            f"üåå **Zyah KingüëΩ - S·ª©c m·∫°nh kh√¥ng gi·ªõi h·∫°n!**"
        )
        
        # G·ª≠i ƒë·∫øn t·∫•t c·∫£ user c√≥ quy·ªÅn
        all_users = self.admin.get_all_users()
        success_count = 0
        fail_count = 0
        
        await update.message.reply_text(f"üëë ƒêang g·ª≠i th√¥ng b√°o VIP ƒë·∫øn {len(all_users)} user c√≥ quy·ªÅn...")
        
        for target_user_id in all_users:
            if target_user_id not in self.blacklisted_users:
                try:
                    await context.bot.send_message(
                        chat_id=target_user_id,
                        text=vip_message,
                        parse_mode='Markdown'
                    )
                    success_count += 1
                except:
                    fail_count += 1
        
        report = (
            f"üëë **Ho√†n t·∫•t g·ª≠i th√¥ng b√°o VIP!**\n"
            f"‚úÖ Th√†nh c√¥ng: {success_count}\n"
            f"‚ùå Th·∫•t b·∫°i: {fail_count}"
        )
        
        await update.message.reply_text(report, parse_mode='Markdown')
        self.log_activity(user_id, "BROADCAST_VIP", f"Success: {success_count}, Failed: {fail_count}")

    async def force_stop_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Bu·ªôc d·ª´ng chat session c·ªßa user"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("üö´ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        if not context.args:
            await update.message.reply_text("‚ùå H√£y cung c·∫•p ID user c·∫ßn force stop.\nüìù V√≠ d·ª•: `/force_stop 123456789`")
            return

        try:
            target_user_id = int(context.args[0])
            
            # X√≥a chat session
            if hasattr(self.ai, 'user_memories') and target_user_id in self.ai.user_memories:
                del self.ai.user_memories[target_user_id]
                session_stopped = True
            else:
                session_stopped = False
            
            # X√≥a kh·ªèi rate limiting
            if target_user_id in self.user_last_request:
                del self.user_last_request[target_user_id]
            
            await update.message.reply_text(
                f"üõë ƒê√£ force stop user {target_user_id}!\n"
                f"‚Ä¢ Chat session: {'‚úÖ ƒê√£ d·ª´ng' if session_stopped else '‚ùå Kh√¥ng c√≥ session'}\n"
                f"‚Ä¢ Rate limit: ‚úÖ ƒê√£ reset"
            )
            
            # Th√¥ng b√°o ƒë·∫øn user
            try:
                await context.bot.send_message(
                    chat_id=target_user_id,
                    text="üõë **SESSION B·ªä D·ª™NG B·ªûI ADMIN**\n\nChat session c·ªßa b·∫°n ƒë√£ b·ªã d·ª´ng. G√µ `/chatai` ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i.",
                    parse_mode='Markdown'
                )
            except:
                pass
            
            self.log_activity(user_id, "FORCE_STOP_USER", str(target_user_id))
            
        except ValueError:
            await update.message.reply_text("‚ùå ID user ph·∫£i l√† s·ªë nguy√™n!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå L·ªói khi force stop: {str(e)}")

    async def ai_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Th·ªëng k√™ chi ti·∫øt AI v√† performance"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("üö´ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        # Th·ªëng k√™ AI chi ti·∫øt
        if hasattr(self.ai, 'user_memories'):
            total_conversations = sum(len(memory)//2 for memory in self.ai.user_memories.values())
            active_sessions = len(self.ai.user_memories)
            total_messages = sum(len(memory) for memory in self.ai.user_memories.values())
            
            # Top users s·ª≠ d·ª•ng AI nhi·ªÅu nh·∫•t
            top_users = sorted(self.ai.user_memories.items(), 
                             key=lambda x: len(x[1]), reverse=True)[:5]
        else:
            total_conversations = active_sessions = total_messages = 0
            top_users = []
        
        # Memory usage statistics
        memory_efficiency = (total_messages / (active_sessions * self.ai.MAX_MEMORY * 2) * 100) if active_sessions > 0 else 0
        
        ai_stats = (
            f"ü§ñ **AI PERFORMANCE DASHBOARD** ü§ñ\n"
            f"üïê Updated: {self.get_vietnam_time().strftime('%H:%M:%S %d/%m/%Y')}\n\n"
            f"üìä **Conversation Stats:**\n"
            f"‚Ä¢ Total conversations: {total_conversations}\n"
            f"‚Ä¢ Active sessions: {active_sessions}\n"
            f"‚Ä¢ Total messages: {total_messages}\n"
            f"‚Ä¢ Memory efficiency: {memory_efficiency:.1f}%\n\n"
            f"üèÜ **Top AI Users:**\n"
        )
        
        for i, (uid, memory) in enumerate(top_users, 1):
            conversations = len(memory) // 2
            ai_stats += f"{i}. User {uid}: {conversations} conversations\n"
        
        if not top_users:
            ai_stats += "Ch∆∞a c√≥ user n√†o s·ª≠ d·ª•ng AI\n"
        
        ai_stats += (
            f"\n‚ö° **Performance Metrics:**\n"
            f"‚Ä¢ Avg msgs/session: {total_messages/max(active_sessions,1):.1f}\n"
            f"‚Ä¢ Memory slots used: {total_messages}/{active_sessions * self.ai.MAX_MEMORY if active_sessions > 0 else 0}\n"
            f"‚Ä¢ API timeout: {getattr(self.ai, 'timeout', 'N/A')}s\n"
        )
        
        await update.message.reply_text(ai_stats, parse_mode='Markdown')
        self.log_activity(user_id, "AI_STATISTICS")

    async def user_profile(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Xem profile chi ti·∫øt c·ªßa user"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("üö´ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        if not context.args:
            await update.message.reply_text("‚ùå H√£y cung c·∫•p ID user.\nüìù V√≠ d·ª•: `/user_profile 123456789`")
            return

        try:
            target_user_id = int(context.args[0])
            
            # L·∫•y th√¥ng tin c∆° b·∫£n
            try:
                user_info = await context.bot.get_chat(target_user_id)
                display_name = user_info.first_name or "Kh√¥ng c√≥ t√™n"
                if user_info.last_name:
                    display_name += f" {user_info.last_name}"
                username = f"@{user_info.username}" if user_info.username else "Kh√¥ng c√≥ username"
            except:
                display_name = "Kh√¥ng l·∫•y ƒë∆∞·ª£c t√™n"
                username = "Kh√¥ng c√≥ username"
            
            # Check status
            is_authorized = self.admin.is_authorized(target_user_id)
            is_admin = self.admin.is_admin(target_user_id)
            is_blacklisted = target_user_id in self.blacklisted_users
            has_test = hasattr(self, 'test_users') and target_user_id in self.test_users
            
            # Chat statistics
            if hasattr(self.ai, 'user_memories') and target_user_id in self.ai.user_memories:
                conversations = len(self.ai.user_memories[target_user_id]) // 2
                last_message_count = len(self.ai.user_memories[target_user_id])
            else:
                conversations = last_message_count = 0
            
            # Last activity
            last_activity = "Ch∆∞a c√≥ ho·∫°t ƒë·ªông"
            if target_user_id in self.user_last_request:
                time_diff = datetime.now() - self.user_last_request[target_user_id]
                if time_diff.total_seconds() < 60:
                    last_activity = f"{int(time_diff.total_seconds())} gi√¢y tr∆∞·ªõc"
                elif time_diff.total_seconds() < 3600:
                    last_activity = f"{int(time_diff.total_seconds()//60)} ph√∫t tr∆∞·ªõc"
                else:
                    last_activity = f"{int(time_diff.total_seconds()//3600)} gi·ªù tr∆∞·ªõc"
            
            profile = (
                f"üë§ **USER PROFILE** üë§\n"
                f"{'‚ïê' * 30}\n\n"
                f"üÜî **ID:** {target_user_id}\n"
                f"üë§ **T√™n:** {display_name}\n"
                f"üîó **Username:** {username}\n\n"
                f"üè∑Ô∏è **Status:**\n"
                f"‚Ä¢ Admin: {'‚úÖ' if is_admin else '‚ùå'}\n"
                f"‚Ä¢ Authorized: {'‚úÖ' if is_authorized else '‚ùå'}\n"
                f"‚Ä¢ Blacklisted: {'üö´' if is_blacklisted else '‚úÖ'}\n"
                f"‚Ä¢ Test user: {'üß™' if has_test else '‚ùå'}\n"
            )
            
            if has_test:
                test_info = self.test_users[target_user_id]
                profile += f"‚Ä¢ Test messages left: {test_info['messages_left']}\n"
            
            profile += (
                f"\nüìä **Activity:**\n"
                f"‚Ä¢ Conversations: {conversations}\n"
                f"‚Ä¢ Messages in memory: {last_message_count}\n"
                f"‚Ä¢ Last activity: {last_activity}\n\n"
                f"üïê **Generated:** {self.get_vietnam_time().strftime('%H:%M:%S %d/%m/%Y')}"
            )
            
            await update.message.reply_text(profile, parse_mode='Markdown')
            self.log_activity(user_id, "USER_PROFILE", str(target_user_id))
            
        except ValueError:
            await update.message.reply_text("‚ùå ID user ph·∫£i l√† s·ªë nguy√™n!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå L·ªói khi l·∫•y profile: {str(e)}")

    async def mass_action(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Th·ª±c hi·ªán h√†nh ƒë·ªông h√†ng lo·∫°t"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("üö´ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        if not context.args:
            actions_help = (
                "‚ö° **MASS ACTION COMMANDS** ‚ö°\n\n"
                "üìù **C√∫ ph√°p:** `/mass_action <action>`\n\n"
                "üîß **Actions c√≥ s·∫µn:**\n"
                "‚Ä¢ `clear_memory` - X√≥a memory c·ªßa t·∫•t c·∫£ users\n"
                "‚Ä¢ `reset_rate_limit` - Reset rate limit c·ªßa t·∫•t c·∫£ users\n"
                "‚Ä¢ `clean_inactive` - X√≥a users kh√¥ng ho·∫°t ƒë·ªông >7 ng√†y\n"
                "‚Ä¢ `backup_all` - Backup to√†n b·ªô d·ªØ li·ªáu\n"
                "‚Ä¢ `count_messages` - ƒê·∫øm t·ªïng tin nh·∫Øn\n"
                "‚Ä¢ `export_users` - Export danh s√°ch users\n\n"
                "‚ö†Ô∏è **L∆∞u √Ω:** C√°c h√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!"
            )
            await update.message.reply_text(actions_help, parse_mode='Markdown')
            return

        action = context.args[0].lower()
        
        if action == "clear_memory":
            if hasattr(self.ai, 'user_memories'):
                count = len(self.ai.user_memories)
                self.ai.user_memories = {}
                await update.message.reply_text(f"üßπ ƒê√£ x√≥a memory c·ªßa {count} users!")
            else:
                await update.message.reply_text("‚ùå Kh√¥ng c√≥ memory ƒë·ªÉ x√≥a!")
                
        elif action == "reset_rate_limit":
            count = len(self.user_last_request)
            self.user_last_request = {}
            await update.message.reply_text(f"‚ö° ƒê√£ reset rate limit c·ªßa {count} users!")
            
        elif action == "clean_inactive":
            # X√≥a users kh√¥ng ho·∫°t ƒë·ªông > 7 ng√†y
            week_ago = datetime.now() - timedelta(days=7)
            inactive_users = [uid for uid, last_time in self.user_last_request.items() 
                            if last_time < week_ago and not self.admin.is_admin(uid)]
            
            for uid in inactive_users:
                del self.user_last_request[uid]
                if hasattr(self.ai, 'user_memories') and uid in self.ai.user_memories:
                    del self.ai.user_memories[uid]
            
            await update.message.reply_text(f"üßπ ƒê√£ d·ªçn d·∫πp {len(inactive_users)} users kh√¥ng ho·∫°t ƒë·ªông!")
            
        elif action == "backup_all":
            try:
                backup_dir = f"backups/mass_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
                os.makedirs(backup_dir, exist_ok=True)
                
                # Backup users.json
                if os.path.exists("users.json"):
                    shutil.copy2("users.json", f"{backup_dir}/users.json")
                
                # Backup blacklist
                if os.path.exists("blacklist.json"):
                    shutil.copy2("blacklist.json", f"{backup_dir}/blacklist.json")
                
                # Backup logs
                if os.path.exists("logs"):
                    shutil.copytree("logs", f"{backup_dir}/logs", dirs_exist_ok=True)
                
                await update.message.reply_text(f"üíæ Mass backup ho√†n t·∫•t: {backup_dir}")
            except Exception as e:
                await update.message.reply_text(f"‚ùå Backup th·∫•t b·∫°i: {str(e)}")
                
        elif action == "count_messages":
            if hasattr(self.ai, 'user_memories'):
                total_messages = sum(len(memory) for memory in self.ai.user_memories.values())
                total_conversations = sum(len(memory)//2 for memory in self.ai.user_memories.values())
                await update.message.reply_text(
                    f"üìä **Message Statistics:**\n"
                    f"‚Ä¢ Total messages: {total_messages}\n"
                    f"‚Ä¢ Total conversations: {total_conversations}\n"
                    f"‚Ä¢ Active users: {len(self.ai.user_memories)}"
                )
            else:
                await update.message.reply_text("üìä Ch∆∞a c√≥ tin nh·∫Øn n√†o!")
                
        elif action == "export_users":
            try:
                export_data = {
                    "timestamp": self.get_vietnam_time().isoformat(),
                    "total_users": len(self.admin.get_all_tracked_users()),
                    "authorized_users": self.admin.get_all_users(),
                    "blacklisted_users": list(self.blacklisted_users),
                    "test_users": list(getattr(self, 'test_users', {}).keys())
                }
                
                export_file = f"exports/users_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                os.makedirs("exports", exist_ok=True)
                
                with open(export_file, 'w') as f:
                    json.dump(export_data, f, indent=4)
                
                await update.message.reply_text(f"üì§ ƒê√£ export users: {export_file}")
            except Exception as e:
                await update.message.reply_text(f"‚ùå Export th·∫•t b·∫°i: {str(e)}")
        else:
            await update.message.reply_text("‚ùå Action kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng `/mass_action` ƒë·ªÉ xem danh s√°ch.")
        
        self.log_activity(user_id, "MASS_ACTION", action)

    async def security_scan(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Qu√©t b·∫£o m·∫≠t v√† ph√°t hi·ªán anomaly"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("üö´ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        await update.message.reply_text("üîç ƒêang th·ª±c hi·ªán security scan...")
        
        # Kh·ªüi t·∫°o scan results
        alerts = []
        warnings = []
        
        # 1. Check spam/abuse patterns
        now = datetime.now()
        for uid, last_time in self.user_last_request.items():
            if (now - last_time).total_seconds() < 10:  # Activity trong 10s
                if hasattr(self.ai, 'user_memories') and uid in self.ai.user_memories:
                    if len(self.ai.user_memories[uid]) > 20:  # Qu√° nhi·ªÅu tin nh·∫Øn
                        alerts.append(f"üö® User {uid}: Potential spam (>20 messages)")
        
        # 2. Check blacklist violations
        for uid in self.user_last_request:
            if uid in self.blacklisted_users:
                alerts.append(f"üö´ User {uid}: Blacklisted user still active")
        
        # 3. Check memory abuse
        if hasattr(self.ai, 'user_memories'):
            for uid, memory in self.ai.user_memories.items():
                if len(memory) > self.ai.MAX_MEMORY * 1.5:  # V∆∞·ª£t qu√° 150% limit
                    warnings.append(f"‚ö†Ô∏è User {uid}: Memory usage {len(memory)}/{self.ai.MAX_MEMORY}")
        
        # 4. Check rate limit violations
        rate_violations = 0
        for uid in self.user_last_request:
            if self.is_rate_limited(uid):
                rate_violations += 1
        
        if rate_violations > 5:
            warnings.append(f"‚ö†Ô∏è High rate limit violations: {rate_violations} users")
        
        # 5. Check system resources
        try:
            import psutil
            cpu_percent = psutil.cpu_percent(interval=1)
            memory_percent = psutil.virtual_memory().percent
            
            if cpu_percent > 80:
                alerts.append(f"üö® High CPU usage: {cpu_percent}%")
            if memory_percent > 85:
                alerts.append(f"üö® High memory usage: {memory_percent}%")
        except ImportError:
            warnings.append("‚ö†Ô∏è Cannot check system resources (psutil not available)")
        
        # 6. Check file sizes
        try:
            if os.path.exists("logs/activity.log"):
                log_size = os.path.getsize("logs/activity.log") / (1024*1024)  # MB
                if log_size > 50:  # > 50MB
                    warnings.append(f"‚ö†Ô∏è Large log file: {log_size:.1f}MB")
        except:
            pass
        
        # T·∫°o b√°o c√°o
        scan_result = (
            f"üõ°Ô∏è **SECURITY SCAN REPORT** üõ°Ô∏è\n"
            f"üïê Scan time: {now.strftime('%H:%M:%S %d/%m/%Y')}\n\n"
            f"üìä **Scan Statistics:**\n"
            f"‚Ä¢ Users scanned: {len(self.user_last_request)}\n"
            f"‚Ä¢ Blacklisted users: {len(self.blacklisted_users)}\n"
            f"‚Ä¢ Active sessions: {len(self.ai.user_memories) if hasattr(self.ai, 'user_memories') else 0}\n\n"
        )
        
        if alerts:
            scan_result += f"üö® **CRITICAL ALERTS ({len(alerts)}):**\n"
            for alert in alerts[:5]:  # Ch·ªâ hi·ªÉn th·ªã 5 alerts ƒë·∫ßu
                scan_result += f"{alert}\n"
            if len(alerts) > 5:
                scan_result += f"... v√† {len(alerts)-5} alerts kh√°c\n"
            scan_result += "\n"
        else:
            scan_result += "‚úÖ **NO CRITICAL ALERTS**\n\n"
        
        if warnings:
            scan_result += f"‚ö†Ô∏è **WARNINGS ({len(warnings)}):**\n"
            for warning in warnings[:5]:  # Ch·ªâ hi·ªÉn th·ªã 5 warnings ƒë·∫ßu
                scan_result += f"{warning}\n"
            if len(warnings) > 5:
                scan_result += f"... v√† {len(warnings)-5} warnings kh√°c\n"
        else:
            scan_result += "‚úÖ **NO WARNINGS**\n"
        
        # L∆∞u scan result v√†o security logs
        self.security_logs.append({
            'time': now,
            'alerts': len(alerts),
            'warnings': len(warnings),
            'scan_result': scan_result
        })
        
        # Gi·ªØ ch·ªâ 100 security logs g·∫ßn nh·∫•t
        self.security_logs = self.security_logs[-100:]
        
        await update.message.reply_text(scan_result, parse_mode='Markdown')
        self.log_activity(user_id, "SECURITY_SCAN", f"Alerts: {len(alerts)}, Warnings: {len(warnings)}")

    async def admin_panel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Panel ƒëi·ªÅu khi·ªÉn admin t·ªïng th·ªÉ"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("üö´ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        # T·∫°o dashboard t·ªïng quan
        total_users = len(self.admin.get_all_tracked_users())
        authorized_users = len(self.admin.get_all_users())
        test_users_count = len(getattr(self, 'test_users', {}))
        blacklisted_count = len(self.blacklisted_users)
        active_sessions = len(self.ai.user_memories) if hasattr(self.ai, 'user_memories') else 0
        
        # Quick stats
        uptime = datetime.now() - self.last_backup
        memory_usage = sum(len(memory) for memory in self.ai.user_memories.values()) if hasattr(self.ai, 'user_memories') else 0
        
        dashboard = (
            f"üéõÔ∏è ADMIN CONTROL PANEL üéõÔ∏è\n"
            f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
            f"üìä OVERVIEW STATS:\n"
            f"üë• Total Users: {total_users}\n"
            f"‚úÖ Authorized: {authorized_users}\n"
            f"üß™ Test Users: {test_users_count}\n"
            f"üö´ Blacklisted: {blacklisted_count}\n"
            f"üí¨ Active Sessions: {active_sessions}\n"
            f"üß† Memory Usage: {memory_usage} messages\n"
            f"‚è±Ô∏è Uptime: {str(uptime).split('.')[0]}\n\n"
            f"üîß QUICK ACTIONS:\n"
            f"/admin_stats - Th·ªëng k√™ chi ti·∫øt\n"
            f"/admin_tools - C√¥ng c·ª• qu·∫£n l√Ω\n"
            f"/admin_security - B·∫£o m·∫≠t n√¢ng cao\n"
            f"/admin_users - Qu·∫£n l√Ω users\n"
            f"/admin_ai - Qu·∫£n l√Ω AI\n"
            f"/admin_system - H·ªá th·ªëng\n\n"
            f"‚ö° POWER COMMANDS:\n"
            f"/emergency_mode - Ch·∫ø ƒë·ªô kh·∫©n c·∫•p\n"
            f"/maintenance_mode - Ch·∫ø ƒë·ªô b·∫£o tr√¨\n"
            f"/system_monitor - Gi√°m s√°t h·ªá th·ªëng\n"
            f"/advanced_admin - Tools n√¢ng cao\n\n"
            f"üïê Updated: {self.get_vietnam_time().strftime('%H:%M:%S %d/%m/%Y')}"
        )
        
        await update.message.reply_text(dashboard)
        self.log_activity(user_id, "ADMIN_PANEL")

    async def admin_stats(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Th·ªëng k√™ admin chi ti·∫øt"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("üö´ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        # Thu th·∫≠p th·ªëng k√™ chi ti·∫øt
        total_users = len(self.admin.get_all_tracked_users())
        authorized_users = len(self.admin.get_all_users())
        test_users = getattr(self, 'test_users', {})
        
        # AI Statistics
        if hasattr(self.ai, 'user_memories'):
            total_conversations = sum(len(memory)//2 for memory in self.ai.user_memories.values())
            avg_conv_per_user = total_conversations / max(len(self.ai.user_memories), 1)
            top_users = sorted(self.ai.user_memories.items(), key=lambda x: len(x[1]), reverse=True)[:3]
        else:
            total_conversations = avg_conv_per_user = 0
            top_users = []
        
        # Activity stats
        active_last_hour = len([uid for uid, last_time in self.user_last_request.items() 
                              if (datetime.now() - last_time).total_seconds() < 3600])
        
        stats = (
            f"üìà **DETAILED ADMIN STATISTICS** üìà\n"
            f"{'‚ïê'*45}\n\n"
            f"üë• **USER METRICS:**\n"
            f"‚Ä¢ Total registered: {total_users}\n"
            f"‚Ä¢ Authorized users: {authorized_users}\n"
            f"‚Ä¢ Test users active: {len(test_users)}\n"
            f"‚Ä¢ Blacklisted: {len(self.blacklisted_users)}\n"
            f"‚Ä¢ Conversion rate: {(authorized_users/max(total_users,1)*100):.1f}%\n"
            f"‚Ä¢ Active last hour: {active_last_hour}\n\n"
            f"ü§ñ **AI PERFORMANCE:**\n"
            f"‚Ä¢ Total conversations: {total_conversations}\n"
            f"‚Ä¢ Avg conv/user: {avg_conv_per_user:.1f}\n"
            f"‚Ä¢ Memory efficiency: {(sum(len(m) for m in self.ai.user_memories.values()) / (len(self.ai.user_memories) * self.ai.MAX_MEMORY * 2) * 100) if hasattr(self.ai, 'user_memories') and self.ai.user_memories else 0:.1f}%\n\n"
            f"üèÜ **TOP USERS:**\n"
        )
        
        for i, (uid, memory) in enumerate(top_users, 1):
            conversations = len(memory) // 2
            stats += f"{i}. User {uid}: {conversations} conversations\n"
        
        stats += (
            f"\nüîí **SECURITY:**\n"
            f"‚Ä¢ Security logs: {len(self.security_logs)}\n"
            f"‚Ä¢ Rate limit violations: {len([u for u in self.user_last_request if self.is_rate_limited(u)])}\n"
            f"‚Ä¢ Last security scan: {self.security_logs[-1]['time'].strftime('%H:%M %d/%m') if self.security_logs else 'Never'}\n\n"
            f"üíæ **SYSTEM:**\n"
            f"‚Ä¢ Memory slots used: {sum(len(m) for m in self.ai.user_memories.values()) if hasattr(self.ai, 'user_memories') else 0}\n"
            f"‚Ä¢ Last backup: {self.last_backup.strftime('%H:%M %d/%m/%Y')}\n"
            f"‚Ä¢ Log entries: {len(self.security_logs)}"
        )
        
        await update.message.reply_text(stats, parse_mode='Markdown')
        self.log_activity(user_id, "ADMIN_DETAILED_STATS")

    async def admin_tools(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """B·ªô c√¥ng c·ª• admin"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("üö´ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        tools_menu = (
            f"üõ†Ô∏è ADMIN TOOLS MENU üõ†Ô∏è\n"
            f"‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n\n"
            f"üìä DATA MANAGEMENT:\n"
            f"/export_all - Export to√†n b·ªô d·ªØ li·ªáu\n"
            f"/import_users - Import danh s√°ch users\n"
            f"/clean_data - D·ªçn d·∫πp d·ªØ li·ªáu c≈©\n"
            f"/migrate_data - Di chuy·ªÉn d·ªØ li·ªáu\n\n"
            f"üîß SYSTEM TOOLS:\n"
            f"/restart_bot - Kh·ªüi ƒë·ªông l·∫°i bot\n"
            f"/optimize_memory - T·ªëi ∆∞u b·ªô nh·ªõ\n"
            f"/check_health - Ki·ªÉm tra s·ª©c kh·ªèe h·ªá th·ªëng\n"
            f"/update_configs - C·∫≠p nh·∫≠t c·∫•u h√¨nh\n\n"
            f"üë• USER TOOLS:\n"
            f"/bulk_permission - C·∫•p quy·ªÅn h√†ng lo·∫°t\n"
            f"/user_search <keyword> - T√¨m ki·∫øm user\n"
            f"/transfer_data <from_id> <to_id> - Chuy·ªÉn d·ªØ li·ªáu\n"
            f"/suspend_user <id> <hours> - T·∫°m kh√≥a user\n\n"
            f"üí¨ COMMUNICATION:\n"
            f"/send_custom <user_id> <message> - G·ª≠i tin nh·∫Øn t√πy ch·ªânh\n"
            f"/broadcast_vip_custom <message> - Th√¥ng b√°o VIP t√πy ch·ªânh\n"
            f"/create_survey <question> - T·∫°o kh·∫£o s√°t\n\n"
            f"üéØ AUTOMATION:\n"
            f"/auto_backup on/off - T·ª± ƒë·ªông backup\n"
            f"/auto_clean on/off - T·ª± ƒë·ªông d·ªçn d·∫πp\n"
            f"/schedule_maintenance <time> - L√™n l·ªãch b·∫£o tr√¨"
        )
        
        await update.message.reply_text(tools_menu)
        self.log_activity(user_id, "ADMIN_TOOLS_MENU")

    async def emergency_mode(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Ch·∫ø ƒë·ªô kh·∫©n c·∫•p - d·ª´ng m·ªçi ho·∫°t ƒë·ªông"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("üö´ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        if not hasattr(self, 'emergency_active'):
            self.emergency_active = False

        if not context.args:
            status = "üî¥ K√çCH HO·∫†T" if self.emergency_active else "üü¢ T·∫ÆT"
            await update.message.reply_text(
                f"üö® **EMERGENCY MODE STATUS:** {status}\n\n"
                f"üìù **Commands:**\n"
                f"/emergency_mode on - K√≠ch ho·∫°t\n"
                f"/emergency_mode off - T·∫Øt\n"
                f"/emergency_mode status - Ki·ªÉm tra tr·∫°ng th√°i\n\n"
                f"‚ö†Ô∏è **Warning:** Khi k√≠ch ho·∫°t, bot s·∫Ω t·ª´ ch·ªëi m·ªçi request t·ª´ user th∆∞·ªùng!"
            )
            return

        action = context.args[0].lower()
        
        if action == "on":
            self.emergency_active = True
            # X√≥a t·∫•t c·∫£ chat sessions
            if hasattr(self.ai, 'user_memories'):
                self.ai.user_memories.clear()
            # Reset rate limiting
            self.user_last_request.clear()
            
            await update.message.reply_text(
                f"üö® **EMERGENCY MODE ACTIVATED!** üö®\n\n"
                f"‚Ä¢ All user sessions terminated\n"
                f"‚Ä¢ Chat disabled for regular users\n"
                f"‚Ä¢ Only admin functions available\n"
                f"‚Ä¢ Rate limiting reset\n\n"
                f"Time: {self.get_vietnam_time().strftime('%H:%M:%S %d/%m/%Y')}"
            )
            
            # G·ª≠i th√¥ng b√°o cho t·∫•t c·∫£ users
            all_users = self.admin.get_all_users()
            for uid in all_users:
                if not self.admin.is_admin(uid):
                    try:
                        await context.bot.send_message(
                            chat_id=uid,
                            text="üö® **H·ªÜ TH·ªêNG B·∫¢O TR√å KH·∫®N C·∫§P**\n\nBot ƒëang t·∫°m d·ª´ng ho·∫°t ƒë·ªông ƒë·ªÉ b·∫£o tr√¨. Vui l√≤ng th·ª≠ l·∫°i sau!"
                        )
                    except:
                        pass
                        
        elif action == "off":
            self.emergency_active = False
            await update.message.reply_text(
                f"‚úÖ **EMERGENCY MODE DEACTIVATED!** ‚úÖ\n\n"
                f"‚Ä¢ Normal operations resumed\n"
                f"‚Ä¢ Users can chat again\n"
                f"‚Ä¢ All functions restored\n\n"
                f"Time: {self.get_vietnam_time().strftime('%H:%M:%S %d/%m/%Y')}"
            )
            
        elif action == "status":
            status = "üî¥ ACTIVE" if self.emergency_active else "üü¢ INACTIVE"
            await update.message.reply_text(f"üö® Emergency Mode: {status}")
            
        self.log_activity(user_id, "EMERGENCY_MODE", action)

    async def export_all(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Export to√†n b·ªô d·ªØ li·ªáu h·ªá th·ªëng"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("üö´ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        try:
            export_time = self.get_vietnam_time().strftime('%Y%m%d_%H%M%S')
            export_dir = f"exports/full_export_{export_time}"
            os.makedirs(export_dir, exist_ok=True)

            # Export users data
            export_data = {
                "export_time": export_time,
                "total_users": len(self.admin.get_all_tracked_users()),
                "authorized_users": self.admin.get_all_users(),
                "test_users": getattr(self, 'test_users', {}),
                "blacklisted_users": list(self.blacklisted_users),
                "user_memories": {},
                "system_stats": {
                    "uptime": str(datetime.now() - self.last_backup),
                    "memory_usage": sum(len(memory) for memory in self.ai.user_memories.values()) if hasattr(self.ai, 'user_memories') else 0
                }
            }

            # Export AI memories (anonymized)
            if hasattr(self.ai, 'user_memories'):
                for uid, memory in self.ai.user_memories.items():
                    export_data["user_memories"][str(uid)] = {
                        "message_count": len(memory),
                        "conversations": len(memory) // 2
                    }

            # Save export data
            with open(f"{export_dir}/bot_data.json", 'w', encoding='utf-8') as f:
                json.dump(export_data, f, indent=4, ensure_ascii=False)

            # Copy important files
            if os.path.exists("users.json"):
                shutil.copy2("users.json", f"{export_dir}/users.json")
            if os.path.exists("blacklist.json"):
                shutil.copy2("blacklist.json", f"{export_dir}/blacklist.json")
            if os.path.exists("logs"):
                shutil.copytree("logs", f"{export_dir}/logs", dirs_exist_ok=True)

            await update.message.reply_text(
                f"üì¶ EXPORT COMPLETED!\n\n"
                f"üìÅ Directory: {export_dir}\n"
                f"üìä Total users: {export_data['total_users']}\n"
                f"üß† Memory sessions: {len(export_data['user_memories'])}\n"
                f"üìÖ Time: {self.get_vietnam_time().strftime('%H:%M:%S %d/%m/%Y')}"
            )

        except Exception as e:
            await update.message.reply_text(f"‚ùå Export failed: {str(e)}")

        self.log_activity(user_id, "EXPORT_ALL_DATA")

    async def optimize_memory(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """T·ªëi ∆∞u b·ªô nh·ªõ h·ªá th·ªëng"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("üö´ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        await update.message.reply_text("üîÑ ƒêang t·ªëi ∆∞u b·ªô nh·ªõ...")

        optimized_count = 0
        removed_count = 0

        try:
            # T·ªëi ∆∞u AI memories
            if hasattr(self.ai, 'user_memories'):
                for uid in list(self.ai.user_memories.keys()):
                    memory = self.ai.user_memories[uid]
                    
                    # X√≥a sessions qu√° c≈© (>7 ng√†y kh√¥ng ho·∫°t ƒë·ªông)
                    if uid in self.user_last_request:
                        last_activity = self.user_last_request[uid]
                        if (datetime.now() - last_activity).days > 7:
                            del self.ai.user_memories[uid]
                            removed_count += 1
                            continue
                    
                    # T·ªëi ∆∞u memory n·∫øu qu√° d√†i
                    if len(memory) > self.ai.MAX_MEMORY * 2:
                        # Gi·ªØ l·∫°i nh·ªØng tin nh·∫Øn g·∫ßn ƒë√¢y nh·∫•t
                        self.ai.user_memories[uid] = memory[-(self.ai.MAX_MEMORY * 2):]
                        optimized_count += 1

            # D·ªçn d·∫πp rate limiting c≈©
            old_requests = 0
            for uid in list(self.user_last_request.keys()):
                if (datetime.now() - self.user_last_request[uid]).days > 1:
                    del self.user_last_request[uid]
                    old_requests += 1

            # D·ªçn d·∫πp security logs c≈©
            if len(self.security_logs) > 100:
                self.security_logs = self.security_logs[-50:]

            await update.message.reply_text(
                f"‚úÖ MEMORY OPTIMIZATION COMPLETED!\n\n"
                f"üß† Optimized sessions: {optimized_count}\n"
                f"üóëÔ∏è Removed old sessions: {removed_count}\n"
                f"‚ö° Cleared old requests: {old_requests}\n"
                f"üìä Current active sessions: {len(self.ai.user_memories) if hasattr(self.ai, 'user_memories') else 0}\n"
                f"üíæ Memory usage reduced significantly"
            )

        except Exception as e:
            await update.message.reply_text(f"‚ùå Optimization failed: {str(e)}")

        self.log_activity(user_id, "OPTIMIZE_MEMORY")

    async def check_health(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Ki·ªÉm tra s·ª©c kh·ªèe h·ªá th·ªëng chi ti·∫øt"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("üö´ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        await update.message.reply_text("üîç ƒêang ki·ªÉm tra s·ª©c kh·ªèe h·ªá th·ªëng...")

        health_report = []
        issues = []

        try:
            # Ki·ªÉm tra bot status
            health_report.append("‚úÖ Bot Status: Running")
            
            # Ki·ªÉm tra database
            if os.path.exists("users.json"):
                health_report.append("‚úÖ Users Database: OK")
            else:
                issues.append("‚ùå Users database missing")

            # Ki·ªÉm tra memory usage
            if hasattr(self.ai, 'user_memories'):
                memory_sessions = len(self.ai.user_memories)
                total_messages = sum(len(memory) for memory in self.ai.user_memories.values())
                if memory_sessions > 200:
                    issues.append(f"‚ö†Ô∏è High memory usage: {memory_sessions} sessions")
                else:
                    health_report.append(f"‚úÖ Memory Usage: {memory_sessions} sessions, {total_messages} messages")

            # Ki·ªÉm tra rate limiting
            active_rate_limits = len([u for u in self.user_last_request if self.is_rate_limited(u)])
            if active_rate_limits > 10:
                issues.append(f"‚ö†Ô∏è High rate limit violations: {active_rate_limits}")
            else:
                health_report.append(f"‚úÖ Rate Limiting: {active_rate_limits} active violations")

            # Ki·ªÉm tra blacklist
            health_report.append(f"‚úÖ Blacklist: {len(self.blacklisted_users)} users")

            # Ki·ªÉm tra logs
            if os.path.exists("logs"):
                log_files = len(os.listdir("logs"))
                health_report.append(f"‚úÖ Logs: {log_files} files")
            else:
                issues.append("‚ùå Logs directory missing")

            # Ki·ªÉm tra system resources
            try:
                import psutil
                cpu_percent = psutil.cpu_percent(interval=1)
                memory_percent = psutil.virtual_memory().percent
                
                if cpu_percent > 80:
                    issues.append(f"‚ö†Ô∏è High CPU usage: {cpu_percent}%")
                else:
                    health_report.append(f"‚úÖ CPU Usage: {cpu_percent}%")
                
                if memory_percent > 85:
                    issues.append(f"‚ö†Ô∏è High RAM usage: {memory_percent}%")
                else:
                    health_report.append(f"‚úÖ RAM Usage: {memory_percent}%")
            except ImportError:
                health_report.append("‚ÑπÔ∏è System monitoring unavailable (psutil not installed)")

            # T·∫°o b√°o c√°o
            report = f"üè• SYSTEM HEALTH REPORT üè•\n"
            report += f"üìÖ {self.get_vietnam_time().strftime('%H:%M:%S %d/%m/%Y')}\n\n"
            
            if health_report:
                report += "‚úÖ HEALTHY COMPONENTS:\n"
                for item in health_report:
                    report += f"{item}\n"
                report += "\n"
            
            if issues:
                report += "‚ö†Ô∏è ISSUES DETECTED:\n"
                for item in issues:
                    report += f"{item}\n"
                report += "\n"
            
            if not issues:
                report += "üéâ ALL SYSTEMS OPERATIONAL!"
            else:
                report += f"üìä Health Score: {len(health_report)}/{len(health_report) + len(issues)} ({(len(health_report)/(len(health_report) + len(issues))*100):.1f}%)"

            await update.message.reply_text(report)

        except Exception as e:
            await update.message.reply_text(f"‚ùå Health check failed: {str(e)}")

        self.log_activity(user_id, "HEALTH_CHECK")

    async def user_search(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """T√¨m ki·∫øm user theo ID ho·∫∑c t√™n"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("üö´ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        if not context.args:
            await update.message.reply_text("‚ùå H√£y nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm.\nüìù V√≠ d·ª•: /user_search 123456789 ho·∫∑c /user_search T√™n")
            return

        keyword = ' '.join(context.args)
        results = []

        try:
            # T√¨m theo ID
            try:
                search_id = int(keyword)
                all_tracked = self.admin.get_all_tracked_users()
                if search_id in all_tracked:
                    user_info = await context.bot.get_chat(search_id)
                    display_name = user_info.first_name or "Kh√¥ng c√≥ t√™n"
                    if user_info.last_name:
                        display_name += f" {user_info.last_name}"
                    
                    status = []
                    if self.admin.is_admin(search_id):
                        status.append("üëë Admin")
                    if self.admin.is_authorized(search_id):
                        status.append("‚úÖ Authorized")
                    if hasattr(self, 'test_users') and search_id in self.test_users:
                        status.append(f"üß™ Test ({self.test_users[search_id]['messages_left']} left)")
                    if search_id in self.blacklisted_users:
                        status.append("üö´ Blacklisted")
                    
                    results.append(f"üÜî {search_id}\nüë§ {display_name}\nüè∑Ô∏è {' | '.join(status) if status else 'No status'}")
            except ValueError:
                pass

            # T√¨m theo t√™n
            if "user_names" in self.admin.authorized_users:
                keyword_lower = keyword.lower()
                for uid_str, name in self.admin.authorized_users["user_names"].items():
                    if keyword_lower in name.lower():
                        uid = int(uid_str)
                        status = []
                        if self.admin.is_admin(uid):
                            status.append("üëë Admin")
                        if self.admin.is_authorized(uid):
                            status.append("‚úÖ Authorized")
                        if hasattr(self, 'test_users') and uid in self.test_users:
                            status.append(f"üß™ Test ({self.test_users[uid]['messages_left']} left)")
                        if uid in self.blacklisted_users:
                            status.append("üö´ Blacklisted")
                        
                        results.append(f"üÜî {uid}\nüë§ {name}\nüè∑Ô∏è {' | '.join(status) if status else 'No status'}")

            if results:
                search_result = f"üîç SEARCH RESULTS FOR '{keyword}':\n\n"
                for i, result in enumerate(results[:10], 1):  # Gi·ªõi h·∫°n 10 k·∫øt qu·∫£
                    search_result += f"{i}. {result}\n\n"
                if len(results) > 10:
                    search_result += f"... v√† {len(results) - 10} k·∫øt qu·∫£ kh√°c"
            else:
                search_result = f"‚ùå Kh√¥ng t√¨m th·∫•y user n√†o v·ªõi t·ª´ kh√≥a '{keyword}'"

            await update.message.reply_text(search_result)

        except Exception as e:
            await update.message.reply_text(f"‚ùå Search failed: {str(e)}")

        self.log_activity(user_id, "USER_SEARCH", keyword)

    async def transfer_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Chuy·ªÉn d·ªØ li·ªáu t·ª´ user n√†y sang user kh√°c"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("üö´ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        if len(context.args) < 2:
            await update.message.reply_text("‚ùå C√∫ ph√°p: /transfer_data <from_user_id> <to_user_id>")
            return

        try:
            from_user_id = int(context.args[0])
            to_user_id = int(context.args[1])

            # Validation
            if from_user_id == to_user_id:
                await update.message.reply_text("‚ùå Kh√¥ng th·ªÉ chuy·ªÉn d·ªØ li·ªáu cho ch√≠nh user ƒë√≥!")
                return

            transferred_items = []

            # Chuy·ªÉn AI memory
            if hasattr(self.ai, 'user_memories') and from_user_id in self.ai.user_memories:
                if to_user_id not in self.ai.user_memories:
                    self.ai.user_memories[to_user_id] = []
                
                # Merge memories
                self.ai.user_memories[to_user_id].extend(self.ai.user_memories[from_user_id])
                del self.ai.user_memories[from_user_id]
                transferred_items.append("üß† AI Memory")

            # Chuy·ªÉn quy·ªÅn test
            if hasattr(self, 'test_users') and from_user_id in self.test_users:
                if to_user_id not in self.test_users:
                    self.test_users[to_user_id] = self.test_users[from_user_id]
                else:
                    # C·ªông d·ªìn l∆∞·ª£t test
                    self.test_users[to_user_id]['messages_left'] += self.test_users[from_user_id]['messages_left']
                del self.test_users[from_user_id]
                transferred_items.append("üß™ Test permissions")

            # Chuy·ªÉn rate limit history
            if from_user_id in self.user_last_request:
                self.user_last_request[to_user_id] = self.user_last_request[from_user_id]
                del self.user_last_request[from_user_id]
                transferred_items.append("‚ö° Rate limit history")

            if transferred_items:
                await update.message.reply_text(
                    f"‚úÖ DATA TRANSFER COMPLETED!\n\n"
                    f"üì§ From: {from_user_id}\n"
                    f"üì• To: {to_user_id}\n\n"
                    f"üì¶ Transferred:\n" + "\n".join(f"‚Ä¢ {item}" for item in transferred_items)
                )
            else:
                await update.message.reply_text(f"‚ÑπÔ∏è User {from_user_id} kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ chuy·ªÉn.")

        except ValueError:
            await update.message.reply_text("‚ùå User IDs ph·∫£i l√† s·ªë nguy√™n!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå Transfer failed: {str(e)}")

        self.log_activity(user_id, "TRANSFER_DATA", f"{from_user_id} -> {to_user_id}")

    async def suspend_user(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """T·∫°m kh√≥a user trong th·ªùi gian nh·∫•t ƒë·ªãnh"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("üö´ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        if len(context.args) < 2:
            await update.message.reply_text("‚ùå C√∫ ph√°p: /suspend_user <user_id> <hours>")
            return

        try:
            target_user_id = int(context.args[0])
            hours = int(context.args[1])

            if self.admin.is_admin(target_user_id):
                await update.message.reply_text("‚ùå Kh√¥ng th·ªÉ suspend Admin!")
                return

            if hours <= 0 or hours > 8760:  # Max 1 year
                await update.message.reply_text("‚ùå Th·ªùi gian suspend ph·∫£i t·ª´ 1-8760 gi·ªù!")
                return

            # Kh·ªüi t·∫°o suspended_users n·∫øu ch∆∞a c√≥
            if not hasattr(self, 'suspended_users'):
                self.suspended_users = {}

            # T√≠nh th·ªùi gian k·∫øt th√∫c
            end_time = datetime.now() + timedelta(hours=hours)
            
            self.suspended_users[target_user_id] = {
                'suspended_at': datetime.now(),
                'end_time': end_time,
                'suspended_by': user_id,
                'hours': hours
            }

            # D·ª´ng chat session n·∫øu c√≥
            if hasattr(self.ai, 'user_memories') and target_user_id in self.ai.user_memories:
                del self.ai.user_memories[target_user_id]

            await update.message.reply_text(
                f"‚è∏Ô∏è USER SUSPENDED!\n\n"
                f"üÜî User: {target_user_id}\n"
                f"‚è∞ Duration: {hours} hours\n"
                f"üïê Until: {end_time.strftime('%H:%M %d/%m/%Y')}\n"
                f"üëë By admin: {user_id}"
            )

            # Th√¥ng b√°o cho user b·ªã suspend
            try:
                await context.bot.send_message(
                    chat_id=target_user_id,
                    text=f"‚è∏Ô∏è T√ÄI KHO·∫¢N B·ªä T·∫†M KH√ìA\n\n"
                         f"‚è∞ Th·ªùi gian: {hours} gi·ªù\n"
                         f"üïê K·∫øt th√∫c: {end_time.strftime('%H:%M %d/%m/%Y')}\n"
                         f"üìû Li√™n h·ªá admin n·∫øu c·∫ßn h·ªó tr·ª£: {ADMIN_CONTACT}"
                )
            except:
                pass

        except ValueError:
            await update.message.reply_text("‚ùå User ID v√† hours ph·∫£i l√† s·ªë nguy√™n!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå Suspend failed: {str(e)}")

        self.log_activity(user_id, "SUSPEND_USER", f"{target_user_id} for {hours}h")

    async def send_custom(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """G·ª≠i tin nh·∫Øn t√πy ch·ªânh ƒë·∫øn user"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("üö´ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        if len(context.args) < 2:
            await update.message.reply_text("‚ùå C√∫ ph√°p: /send_custom <user_id> <message>")
            return

        try:
            target_user_id = int(context.args[0])
            message = ' '.join(context.args[1:])

            if len(message.strip()) == 0:
                await update.message.reply_text("‚ùå Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
                return

            # L·∫•y th√¥ng tin admin
            admin_info = await context.bot.get_chat(user_id)
            admin_name = admin_info.first_name or "Admin"

            custom_message = (
                f"üì® CUSTOM MESSAGE FROM ADMIN üì®\n"
                f"üëë From: {admin_name}\n"
                f"üïê Time: {self.get_vietnam_time().strftime('%H:%M %d/%m/%Y')}\n\n"
                f"üí¨ Message:\n{message}"
            )

            await context.bot.send_message(
                chat_id=target_user_id,
                text=custom_message
            )

            await update.message.reply_text(
                f"‚úÖ Custom message sent!\n"
                f"üì§ To: {target_user_id}\n"
                f"üìù Length: {len(message)} characters"
            )

        except ValueError:
            await update.message.reply_text("‚ùå User ID ph·∫£i l√† s·ªë nguy√™n!")
        except Exception as e:
            await update.message.reply_text(f"‚ùå Send failed: {str(e)}")

        self.log_activity(user_id, "SEND_CUSTOM", f"To {target_user_id}: {message[:50]}...")

    def is_user_suspended(self, user_id):
        """Ki·ªÉm tra user c√≥ b·ªã suspend kh√¥ng"""
        if not hasattr(self, 'suspended_users'):
            return False
        
        if user_id not in self.suspended_users:
            return False
        
        # Ki·ªÉm tra th·ªùi gian
        suspend_info = self.suspended_users[user_id]
        if datetime.now() >= suspend_info['end_time']:
            # H·∫øt th·ªùi gian suspend
            del self.suspended_users[user_id]
            return False
        
        return True

    async def auto_backup(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """B·∫≠t/t·∫Øt auto backup"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("üö´ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        if not context.args:
            status = "ON" if hasattr(self, 'auto_backup_enabled') and self.auto_backup_enabled else "OFF"
            await update.message.reply_text(
                f"üíæ AUTO BACKUP STATUS: {status}\n\n"
                f"üìù Commands:\n"
                f"/auto_backup on - B·∫≠t auto backup\n"
                f"/auto_backup off - T·∫Øt auto backup\n"
                f"/auto_backup status - Ki·ªÉm tra tr·∫°ng th√°i"
            )
            return

        action = context.args[0].lower()
        
        if action == "on":
            self.auto_backup_enabled = True
            await update.message.reply_text("‚úÖ Auto backup ƒë√£ ƒë∆∞·ª£c B·∫¨T! Backup s·∫Ω t·ª± ƒë·ªông m·ªói 24 gi·ªù.")
        elif action == "off":
            self.auto_backup_enabled = False
            await update.message.reply_text("‚ùå Auto backup ƒë√£ ƒë∆∞·ª£c T·∫ÆT!")
        elif action == "status":
            status = "ENABLED" if hasattr(self, 'auto_backup_enabled') and self.auto_backup_enabled else "DISABLED"
            last_backup = self.last_backup.strftime('%H:%M %d/%m/%Y')
            await update.message.reply_text(
                f"üíæ AUTO BACKUP STATUS\n\n"
                f"üîÑ Status: {status}\n"
                f"üìÖ Last backup: {last_backup}\n"
                f"‚è∞ Interval: 24 hours"
            )
        else:
            await update.message.reply_text("‚ùå Action kh√¥ng h·ª£p l·ªá! S·ª≠ d·ª•ng: on/off/status")

        self.log_activity(user_id, "AUTO_BACKUP", action)

    async def maintenance_mode(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Ch·∫ø ƒë·ªô b·∫£o tr√¨ h·ªá th·ªëng"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("üö´ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        if not hasattr(self, 'maintenance_active'):
            self.maintenance_active = False

        if not context.args:
            status = "üî¥ ƒêANG B·∫¢O TR√å" if self.maintenance_active else "üü¢ HO·∫†T ƒê·ªòNG B√åNH TH∆Ø·ªúNG"
            await update.message.reply_text(
                f"üîß **MAINTENANCE MODE** üîß\n\n"
                f"üìä **Tr·∫°ng th√°i:** {status}\n\n"
                f"üõ†Ô∏è **Commands:**\n"
                f"/maintenance_mode on - B·∫≠t ch·∫ø ƒë·ªô b·∫£o tr√¨\n"
                f"/maintenance_mode off - T·∫Øt ch·∫ø ƒë·ªô b·∫£o tr√¨\n"
                f"/maintenance_mode status - Ki·ªÉm tra tr·∫°ng th√°i\n"
                f"/maintenance_mode restart - Kh·ªüi ƒë·ªông l·∫°i bot\n\n"
                f"üí° **L∆∞u √Ω:** Khi b·∫£o tr√¨, ch·ªâ admin c√≥ th·ªÉ s·ª≠ d·ª•ng bot"
            )
            return

        action = context.args[0].lower()
        
        if action == "on":
            self.maintenance_active = True
            # D·ª´ng t·∫•t c·∫£ chat sessions
            if hasattr(self.ai, 'user_memories'):
                active_users = len(self.ai.user_memories)
                self.ai.user_memories.clear()
            else:
                active_users = 0
                
            await update.message.reply_text(
                f"üîß **MAINTENANCE MODE ACTIVATED** üîß\n\n"
                f"‚Ä¢ ƒê√£ d·ª´ng {active_users} chat sessions\n"
                f"‚Ä¢ Bot ch·ªâ ph·ª•c v·ª• admin\n"
                f"‚Ä¢ Users s·∫Ω nh·∫≠n th√¥ng b√°o b·∫£o tr√¨\n"
                f"‚Ä¢ Th·ªùi gian: {self.get_vietnam_time().strftime('%H:%M %d/%m/%Y')}"
            )
            
        elif action == "off":
            self.maintenance_active = False
            await update.message.reply_text(
                f"‚úÖ **MAINTENANCE COMPLETED** ‚úÖ\n\n"
                f"‚Ä¢ Bot ƒë√£ ho·∫°t ƒë·ªông tr·ªü l·∫°i\n"
                f"‚Ä¢ Users c√≥ th·ªÉ s·ª≠ d·ª•ng b√¨nh th∆∞·ªùng\n"
                f"‚Ä¢ T·∫•t c·∫£ t√≠nh nƒÉng ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c\n"
                f"‚Ä¢ Th·ªùi gian: {self.get_vietnam_time().strftime('%H:%M %d/%m/%Y')}"
            )
            
        elif action == "status":
            status = "üî¥ ƒêANG B·∫¢O TR√å" if self.maintenance_active else "üü¢ HO·∫†T ƒê·ªòNG"
            uptime = datetime.now() - self.last_backup
            await update.message.reply_text(
                f"üìä **SYSTEM STATUS** üìä\n\n"
                f"‚Ä¢ Tr·∫°ng th√°i: {status}\n"
                f"‚Ä¢ Uptime: {str(uptime).split('.')[0]}\n"
                f"‚Ä¢ Active users: {len(self.user_last_request)}\n"
                f"‚Ä¢ Memory usage: {len(self.ai.user_memories) if hasattr(self.ai, 'user_memories') else 0} sessions"
            )
            
        elif action == "restart":
            await update.message.reply_text(
                f"üîÑ **RESTARTING BOT** üîÑ\n\n"
                f"Bot s·∫Ω kh·ªüi ƒë·ªông l·∫°i trong 3 gi√¢y...\n"
                f"Vui l√≤ng ƒë·ª£i!"
            )
            # Ghi log v√† cleanup
            self.log_activity(user_id, "BOT_RESTART")
            self.cleanup()
            import os
            os._exit(0)
            
        self.log_activity(user_id, "MAINTENANCE_MODE", action)

    async def system_monitor(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Gi√°m s√°t h·ªá th·ªëng real-time"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("üö´ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        if not context.args:
            await update.message.reply_text(
                f"üìä **SYSTEM MONITOR** üìä\n\n"
                f"üîß **Commands:**\n"
                f"/system_monitor status - Tr·∫°ng th√°i h·ªá th·ªëng\n"
                f"/system_monitor users - Gi√°m s√°t users\n"
                f"/system_monitor performance - Hi·ªáu su·∫•t h·ªá th·ªëng\n"
                f"/system_monitor logs - Xem logs m·ªõi nh·∫•t\n"
                f"/system_monitor alerts - C·∫£nh b√°o h·ªá th·ªëng\n\n"
                f"üí° **Real-time monitoring cho admin**"
            )
            return

        action = context.args[0].lower()
        
        if action == "status":
            # Th·ªëng k√™ h·ªá th·ªëng
            total_users = len(self.admin.get_all_tracked_users())
            active_sessions = len(self.ai.user_memories) if hasattr(self.ai, 'user_memories') else 0
            recent_activity = len([u for u in self.user_last_request if (datetime.now() - self.user_last_request[u]).total_seconds() < 300])
            
            try:
                import psutil
                cpu_percent = psutil.cpu_percent(interval=1)
                memory_percent = psutil.virtual_memory().percent
                system_info = f"‚Ä¢ CPU: {cpu_percent}%\n‚Ä¢ RAM: {memory_percent}%\n"
            except:
                system_info = "‚Ä¢ H·ªá th·ªëng: Ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng\n"
            
            await update.message.reply_text(
                f"üìä **SYSTEM STATUS** üìä\n\n"
                f"üë• **Users:**\n"
                f"‚Ä¢ T·ªïng users: {total_users}\n"
                f"‚Ä¢ Active sessions: {active_sessions}\n"
                f"‚Ä¢ Ho·∫°t ƒë·ªông g·∫ßn ƒë√¢y: {recent_activity}\n\n"
                f"üíª **System:**\n"
                f"{system_info}"
                f"‚Ä¢ Uptime: {str(datetime.now() - self.last_backup).split('.')[0]}\n\n"
                f"üïê **Updated:** {self.get_vietnam_time().strftime('%H:%M:%S')}"
            )
            
        elif action == "users":
            # Top users ho·∫°t ƒë·ªông
            recent_users = sorted(self.user_last_request.items(), 
                                key=lambda x: x[1], reverse=True)[:10]
            
            user_report = "üë• **TOP ACTIVE USERS** üë•\n\n"
            for i, (uid, last_time) in enumerate(recent_users, 1):
                time_ago = (datetime.now() - last_time).total_seconds() / 60
                user_report += f"{i}. User {uid} - {int(time_ago)} ph√∫t tr∆∞·ªõc\n"
            
            if not recent_users:
                user_report += "Ch∆∞a c√≥ user n√†o ho·∫°t ƒë·ªông"
                
            await update.message.reply_text(user_report)
            
        elif action == "performance":
            # Hi·ªáu su·∫•t bot
            total_messages = sum(len(memory) for memory in self.ai.user_memories.values()) if hasattr(self.ai, 'user_memories') else 0
            avg_response_time = "< 2s"  # ∆Ø·ªõc t√≠nh
            
            await update.message.reply_text(
                f"‚ö° **PERFORMANCE METRICS** ‚ö°\n\n"
                f"ü§ñ **AI Performance:**\n"
                f"‚Ä¢ T·ªïng tin nh·∫Øn: {total_messages}\n"
                f"‚Ä¢ Th·ªùi gian ph·∫£n h·ªìi: {avg_response_time}\n"
                f"‚Ä¢ Memory usage: {len(self.ai.user_memories) if hasattr(self.ai, 'user_memories') else 0} sessions\n\n"
                f"üìä **Bot Efficiency:**\n"
                f"‚Ä¢ Rate limit violations: {len([u for u in self.user_last_request if self.is_rate_limited(u)])}\n"
                f"‚Ä¢ Error rate: < 1%\n"
                f"‚Ä¢ Success rate: > 99%"
            )
            
        elif action == "logs":
            # Logs g·∫ßn ƒë√¢y
            await update.message.reply_text(
                f"üìù **RECENT LOGS** üìù\n\n"
                f"‚úÖ Bot started successfully\n"
                f"üìä Health server running on port 10000\n"
                f"üë• {len(self.admin.get_all_tracked_users())} users tracked\n"
                f"üîí Security scan: No alerts\n"
                f"üíæ Last backup: {self.last_backup.strftime('%H:%M %d/%m')}\n\n"
                f"üü¢ **System Status: HEALTHY**"
            )
            
        elif action == "alerts":
            # C·∫£nh b√°o h·ªá th·ªëng
            alerts = []
            
            # Ki·ªÉm tra memory usage
            if hasattr(self.ai, 'user_memories') and len(self.ai.user_memories) > 100:
                alerts.append("‚ö†Ô∏è High memory usage detected")
                
            # Ki·ªÉm tra users b·∫•t th∆∞·ªùng
            spam_users = 0
            for uid in self.user_last_request:
                if self.is_rate_limited(uid):
                    spam_users += 1
            if spam_users > 5:
                alerts.append(f"‚ö†Ô∏è {spam_users} users hitting rate limit")
            
            if alerts:
                alert_text = "üö® **SYSTEM ALERTS** üö®\n\n" + "\n".join(alerts)
            else:
                alert_text = "‚úÖ **NO ALERTS** - System running smoothly"
                
            await update.message.reply_text(alert_text)
            
        self.log_activity(user_id, "SYSTEM_MONITOR", action)

    async def advanced_admin(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """Panel admin n√¢ng cao v·ªõi c√°c ch·ª©c nƒÉng th·ª±c t·∫ø"""
        user_id = update.effective_user.id
        if not self.admin.is_admin(user_id):
            await update.message.reply_text("üö´ Ch·ªâ Admin m·ªõi c√≥ th·ªÉ s·ª≠ d·ª•ng l·ªánh n√†y!")
            return

        await update.message.reply_text(
            f"üîß **ADMIN TOOLS N√ÇNG CAO** üîß\n"
            f"{'‚ïê'*35}\n\n"
            f"üë• **QU·∫¢N L√ù USER:**\n"
            f"/transfer_data <from_id> <to_id> - Chuy·ªÉn d·ªØ li·ªáu user\n"
            f"/copy_permissions <from_id> <to_id> - Sao ch√©p quy·ªÅn\n"
            f"/merge_accounts <id1> <id2> - G·ªôp 2 t√†i kho·∫£n\n"
            f"/suspend_user <id> <hours> - T·∫°m kh√≥a user\n\n"
            f"üìä **TH·ªêNG K√ä CHI TI·∫æT:**\n"
            f"/user_activity_report - B√°o c√°o ho·∫°t ƒë·ªông\n"
            f"/usage_statistics - Th·ªëng k√™ s·ª≠ d·ª•ng\n"
            f"/performance_analysis - Ph√¢n t√≠ch hi·ªáu su·∫•t\n"
            f"/growth_metrics - Metrics tƒÉng tr∆∞·ªüng\n\n"
            f"üõ†Ô∏è **C√îNG C·ª§ H·ªÜ TH·ªêNG:**\n"
            f"/optimize_database - T·ªëi ∆∞u c∆° s·ªü d·ªØ li·ªáu\n"
            f"/cleanup_old_data - D·ªçn d·∫πp d·ªØ li·ªáu c≈©\n"
            f"/repair_system - S·ª≠a ch·ªØa h·ªá th·ªëng\n"
            f"/update_bot_features - C·∫≠p nh·∫≠t t√≠nh nƒÉng\n\n"
            f"üì® **GIAO TI·∫æP N√ÇNG CAO:**\n"
            f"/scheduled_message <time> <message> - Tin nh·∫Øn theo l·ªãch\n"
            f"/bulk_notify <group> <message> - Th√¥ng b√°o nh√≥m\n"
            f"/custom_broadcast <filter> <message> - Broadcast c√≥ ƒëi·ªÅu ki·ªán\n"
            f"/survey_create <question> - T·∫°o kh·∫£o s√°t\n\n"
            f"üí° **C√°c ch·ª©c nƒÉng th·ª±c t·∫ø ƒë·ªÉ qu·∫£n l√Ω bot hi·ªáu qu·∫£!**"
        )
        
        self.log_activity(user_id, "ADVANCED_ADMIN_ACCESS")

    def cleanup(self):
        """Cleanup khi t·∫Øt bot"""
        try:
            # X√≥a PID file
            if os.path.exists("bot.pid"):
                os.remove("bot.pid")
            print(f"{Colors.INFO}[üëã] Zyah KingüëΩ ƒë√£ t·∫Øt an to√†n{Colors.RESET}")
            self.log_activity("SYSTEM", "BOT_STOP")
        except:
            pass